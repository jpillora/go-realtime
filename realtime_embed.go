// Code generated by go-bindata.
// sources:
// realtime.js
// DO NOT EDIT!

package realtime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _realtimeJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x3a\xfb\x57\xe3\x36\xba\xbf\xf3\x57\x28\x3e\x73\xa9\x0d\x8e\x13\xa6\xb7\xf7\x41\xc6\xcc\xa5\x4c\x7a\x97\x59\x4a\x66\x79\x74\x77\x4f\xca\x82\x6c\x2b\x89\xc1\xb1\x3d\x96\x03\xc9\x42\xfa\xb7\xef\xf7\x49\xb2\x2c\x3b\x61\x66\x7a\xb6\x3d\xa7\xd8\x96\xbe\xf7\x5b\xca\xf4\xf6\xc8\x34\xc9\x02\x9a\x90\xa7\x38\x8d\xb2\x27\xf7\xaf\x2c\xb8\xcc\xc2\x07\x56\x92\xbd\xde\x4e\xaf\x47\x2e\x18\x4d\xca\x78\xce\x48\x97\x3c\xf6\xbd\x03\xaf\x0f\x2f\xb3\xb2\xcc\xf9\x61\xaf\x37\x8d\xcb\xd9\x22\xf0\xc2\x6c\xde\xbb\xcf\xe3\x24\xc9\x0a\xda\x9b\x66\xdd\x42\xa1\x20\xfa\x47\x8a\xb8\x9f\xe4\x26\x79\x17\xb1\xc7\xff\xab\x40\x11\xef\x08\xa8\xfd\x7c\x7a\x45\x4e\xb2\x7c\x55\xc4\xd3\x59\x49\xde\xf6\x0f\x7e\xd8\xb1\x27\x8b\x34\x2c\xe3\x2c\xb5\x95\x54\x24\xca\xc2\xc5\x9c\xa5\xa5\x43\x9e\x77\x76\x08\x89\x27\x76\x47\x6e\x79\x5a\x60\x07\xd6\x09\x29\x58\xb9\x28\x52\x42\x13\x56\x94\xb6\x75\x35\x8b\x39\x09\x8a\xec\x89\xb3\x02\x68\x30\x4e\xd2\xac\x24\x7c\x91\xe7\x59\x51\x12\x8d\xca\x2d\x67\x80\x64\x7b\xbd\x4a\x76\x92\x17\x59\x99\x85\x59\x42\x1e\x59\xc1\x41\x12\xd8\x7d\xa4\x85\x5c\x26\x3e\xb1\x1e\x0f\x2c\x85\x92\x2f\x82\x24\x0e\xc9\x9c\x95\xb3\x2c\x52\x60\x9a\x8c\x4f\xb4\x2a\x8b\x22\x41\xe9\x51\x48\x01\x52\xc2\x66\xca\x9e\xb4\x85\x05\xc0\x40\x2a\x51\x72\x2f\x5f\xf0\x99\x5d\x94\xd5\x8a\x54\xab\x28\xf1\x73\x8d\x7f\x2a\x16\x5e\x25\x92\x78\x36\x76\xb2\x34\x89\x53\x94\xa1\x2c\x16\x4c\x49\xcb\x73\x16\xc6\xe0\xee\x39\x2b\xa6\xe8\xd4\x78\x9a\x66\x05\x23\x6f\x00\x3b\x07\x93\xc5\x8c\x0b\x30\xb2\x24\xef\xba\x64\xa5\xd4\x91\xc0\x86\x2e\x4b\x97\xac\x2a\x65\xe2\x09\xb1\x3b\x4b\xf2\xf2\x42\xca\x55\xce\xb2\x09\xa0\x76\x7c\xb0\x50\x16\xdc\xb3\xb0\xb4\x60\x43\x80\x11\xd2\x59\x19\x40\xab\x06\x90\xa3\x40\x94\x9a\xab\x81\x36\xd3\xc3\x40\x33\x59\x92\x38\xe5\x25\x4d\x43\xc4\x3f\x2e\x0a\xba\x22\xbb\xbb\x40\xa8\xbd\x5a\x11\x7b\x9a\xc5\x09\x03\x34\x2f\x61\xe9\xb4\x9c\x91\x23\xb2\x52\xaf\x15\x04\x21\x4b\x2f\xcf\x72\x5b\x19\x99\x25\x9c\xa9\x9d\x49\x56\x10\xfb\x01\x48\x93\x65\x0d\x8c\x42\x3c\x8c\xfb\x37\x52\xf4\x37\x16\xb2\xef\x48\xa8\x95\x53\x83\x11\x12\xb1\x84\x95\x8c\x2c\xc7\x0f\x37\x92\x72\x4d\x4e\x4b\x87\x9b\x60\x52\x61\x5a\x1b\x3f\xc0\xa4\xf0\xb7\xe9\xef\xa5\x72\x77\x15\x56\x25\x07\x94\xb1\x20\x0a\xe9\x27\x13\x17\x94\x2f\x17\x9c\x84\x33\x9a\x82\x93\xe0\x6f\x04\xb1\x0f\x00\x95\xb3\x48\x96\x4a\x10\x9b\x3d\xaa\x0c\x92\x1c\xda\x51\x92\xd2\xc7\x78\x4a\xcb\xac\x80\xa5\x33\x58\xd2\xa2\xdb\xc8\x3b\x06\x88\xfe\x00\x1e\xef\x44\x78\x4a\x43\xc2\xf7\xfe\x7e\x45\x51\xa4\x65\x9b\x2c\x98\x08\xc0\xc7\xf1\x8d\x47\x17\x40\x9a\x95\xc5\xaa\xb6\x94\xda\x11\xab\x95\x13\xd6\x3b\xf2\x7f\x95\xde\x34\x8a\x86\x28\xf6\x59\xcc\x4b\x96\xb2\xc2\xfe\x4e\x12\xfe\xce\x25\x5a\x31\x81\xf9\x3a\xfc\x64\xa2\x10\x0c\x78\x61\xc0\x19\x4b\x20\xe6\xb9\x32\xae\xb0\x8e\xb0\xaf\x35\x67\x9c\xd3\x29\xb3\x5c\x8b\x15\x45\x56\xc0\x13\x92\x23\x85\x47\x98\x64\x9c\x59\xc2\xfe\x88\x92\x64\x21\xc0\x2b\xce\xf0\x41\xd1\xde\xd2\x39\xba\x6e\x86\x09\xe5\x1c\x12\xad\x60\x79\xc1\xb8\x60\x41\x09\x8f\xd3\x29\xc4\xe6\x13\x0b\xb8\x2c\xb6\xf6\x35\x56\x28\x70\x56\x39\x63\x04\x5e\xa1\xea\x74\x79\x1c\x31\xc7\x74\x64\xa3\x52\xe8\xec\xb3\x3b\xf8\xa9\x6c\x0a\xaf\x58\x9d\x74\x1d\xb3\x06\x1a\xca\xee\xfd\x43\x14\xee\xf7\x87\x3d\xaf\x64\xbc\x14\x54\x9c\x26\x22\xe8\xe0\xe9\xca\xb7\x0f\x74\x7a\x16\x3c\x70\x75\x96\xf1\x12\x5e\x01\x6c\x83\xa2\x0d\x24\x7f\xed\xfd\xda\xf3\xf6\x9d\x37\xdb\x48\x97\x33\x28\xc0\xc4\x3a\x4d\x1f\x69\x12\x47\xe4\xfa\xe2\xec\x90\x58\x26\xad\x12\xaa\xb4\xa7\x24\x7f\xe2\xb8\x75\xc1\xa6\xc3\x65\xee\xbd\x39\x30\x00\xc2\x2c\x4d\xa1\x56\x54\x71\x22\xd6\xa0\x7c\xa0\xc7\x9e\xd7\xc6\x1a\x5f\x04\x1b\x6b\x59\xba\xc8\x23\x0a\xa2\xb5\x37\x14\x51\x16\x61\x75\xa3\x90\xff\x03\x15\x7e\x17\x8d\xf2\x8a\x45\x0b\x51\x05\x22\x84\xd8\x61\x5d\x0a\x1f\xd8\x0a\x22\x2b\xb8\xc7\xf0\x92\x4c\x1a\xf9\xa0\xca\x1d\x40\xc9\xaa\xc1\xcb\x02\x7c\x6f\xd5\x39\xd0\xb2\x0e\x02\x76\xc9\x7c\x01\xd6\x0e\x20\x12\x24\xf4\xa0\xa6\xd7\x01\x56\x46\x19\xc5\xaf\x6d\x85\x74\x83\xae\xdc\x37\x48\xd3\x54\xad\x99\xd4\xb5\x51\xc7\x20\xc7\xcd\x06\xb1\x0f\x8b\x1c\x5a\x1d\xa8\xa8\xc4\xa4\x09\xc4\x59\xb4\x42\x8b\xb0\x48\xd3\x69\x12\x01\xb3\xc1\x7b\x63\x0f\x3d\x54\xed\xf5\x9b\x58\x95\x9f\x34\xaa\x5a\xd8\xc0\x0f\x8b\x38\x60\xba\x66\xb8\xe2\xa1\x9c\x69\x38\xa7\x76\x85\x40\xd4\x25\x48\xf7\x44\x63\xb3\x59\x85\xdc\xaa\x0c\x17\xab\xad\xf4\xc2\x84\xd1\xe2\x0a\x02\x24\x5b\x94\x76\x8d\xef\x55\x0d\xbb\x36\xe7\x13\x37\xed\x88\x31\x07\xa8\xa0\x96\x6d\x42\x76\xc4\x0e\xf4\x0d\xba\x6a\x41\x8b\x35\x90\xf7\xa0\xdf\x34\xd5\x13\x57\xf3\x83\x9e\x62\xec\x2a\x8f\x5c\x62\x15\x65\xd7\xda\x17\xa1\xab\xb9\x60\xc1\xba\x45\x10\x54\x1e\x1e\xd5\xba\xac\x7b\x1e\xd4\xf9\x21\x0d\x67\xf5\xe8\x65\xc4\x31\x00\x61\x6e\x66\xa9\xb5\xaf\x6d\x46\x24\x31\x90\x63\xcc\xd0\x53\xe2\x0b\x5e\xbd\x00\xca\xa1\x2d\xbe\x34\xeb\xb5\xd3\x10\x3d\x87\x98\xf6\x70\xfc\xe1\xac\x3c\x4d\x4b\xa8\x76\x34\xb1\xeb\x1d\x41\x40\xe0\xbb\xe4\xfb\x3e\xd9\x43\xd5\xfb\x4d\xbf\x44\x31\xff\x5d\xce\xd6\xa9\xfd\x9a\x13\xaa\x08\x92\xab\x26\xd1\xe7\xb6\x93\x4c\x7f\xca\x36\xfd\x87\x58\x58\x5b\x53\x9a\x19\x4d\x9a\x2e\x92\x64\xd3\x84\x75\x5c\x79\x22\xfb\x2e\x4b\x4c\x48\x2c\x02\x3a\x12\xbc\x93\xb3\xd1\xe5\xf0\x43\x2b\x92\x9e\x50\x6b\xe8\x5f\xb6\xb3\x25\x90\x0c\x56\x22\xb4\xb7\xf8\xa5\x6c\xda\x0a\x7a\x99\x59\x07\x21\x4b\x69\xb3\xf2\x6d\x0a\xe9\x37\x84\x1c\x7d\x1a\x9e\xb7\x4d\xa9\x25\x45\xea\x92\x66\x83\x29\x0a\xf2\xba\xcb\x05\x92\x95\x8b\x02\xdb\x94\xb5\xaa\x18\x5f\xc1\xfd\x78\x39\x3a\xf7\x64\xd1\x8d\x27\x2b\x5b\x57\x1b\xa7\x49\x2e\x4b\xd5\x84\x60\x90\x6b\x0c\x57\x32\x16\x80\x10\x98\x56\x6c\x78\xa8\x4a\xed\x41\x62\x8b\x3d\x2c\xdc\x52\x5a\x1d\x49\x06\xba\x2a\x85\xda\x59\x10\xc9\x75\xb8\xd4\xfd\x4c\xc8\x9c\xd3\x02\x1c\x0b\x44\xeb\x9c\x23\x50\xa8\x21\xda\x60\x82\x31\xc3\x4c\x99\x19\xb2\x87\x67\x09\xf3\x9e\x68\x91\x22\x88\x4b\x1a\xb8\x3b\xf5\x18\xdc\x1e\xfe\x14\xe3\xed\x03\xa0\x12\x1c\xa0\xab\x3a\x1e\xdf\x0c\x1a\x7b\xd8\x38\x60\xd7\xfb\x33\x5b\x35\x37\x22\x5e\xaa\xb4\xa9\x7b\x47\x13\x82\x17\xa1\x40\xfd\x60\x98\x52\xe6\x25\xee\x40\x4f\xec\x00\x0d\x73\x0c\x07\x25\xcb\x38\x55\x47\x1f\x0d\x0d\x04\x58\x02\x71\x65\x00\xde\xf3\x2c\xcd\xd1\x5a\x1e\xcd\xf3\x64\x65\x03\x1d\x17\xd9\x39\x35\x1b\xe3\x6c\x80\xff\xc9\xb1\xdd\x80\x33\x39\xa8\xde\x0c\xbb\xde\x1b\x41\x50\x7a\xba\x0a\x15\xab\x71\x54\xd0\x40\xb6\x49\x05\xf5\xad\x7a\x9f\x36\x4b\xa3\x39\x0e\xb6\x70\xac\x31\x5e\xe5\x57\x81\x34\xb8\x6d\x74\xe5\x85\xf7\x8b\x3c\xf6\xd6\x11\x21\x9f\x70\x80\x5c\x84\x21\x04\xff\x64\x01\x67\x48\x3e\x25\x38\xd3\xc2\x48\x2b\x0b\x6d\x98\x2d\xb0\x6c\x98\x69\xb5\xd1\xbe\x74\x0a\xe1\x48\xfd\x7a\x3a\x9a\x83\x99\xd9\xaa\xf5\x90\x52\xcd\xf2\xa4\xf1\x69\x23\xac\xf3\x4d\xd3\x42\x96\x8a\x6a\xf8\x6d\x22\x34\x1a\xc8\xd7\x64\x10\xc0\x4d\x21\xa4\x19\xf6\x7c\xf2\xb6\x4d\xa4\x3e\x16\x19\x59\x64\x0e\x14\xb2\x4f\x36\x46\x0d\x25\x59\xa3\x53\x1a\x03\x44\xd3\x69\x5a\x5d\x71\x96\x31\x2b\x96\x59\x19\xe0\xc8\x5f\xd5\x04\x01\x67\x5b\xf5\xe1\x44\x21\xfe\x07\xb7\x5c\x7c\x37\x0f\x6a\xf2\xb0\x23\xaf\x40\x62\x91\x21\xea\x34\x64\xdc\x80\x54\xaf\x83\x9d\xf5\xc6\x7d\x8e\x4b\x16\x69\xc4\x26\x70\x3e\x8b\xb0\xc6\xee\xf4\xf6\x3a\x3b\x7b\xdb\x2e\x98\xa0\x81\x14\x2a\xbc\xba\x1f\x69\xf8\xd0\xc3\xb2\xd7\xfd\x84\x49\x0b\x08\x98\xc0\x5d\x91\xc1\xdd\x08\x66\x54\xb6\xf4\xe0\x5c\xa0\x6e\x6e\x0e\x49\xdf\xfb\xc1\x7b\x0b\x50\x76\xe8\xe0\xfd\xd2\xf7\xe4\x63\x06\x7d\x38\x9e\x43\x2f\xe2\x18\xae\x7b\xe2\x0e\x0a\x34\x60\x29\xa8\xb0\xd7\xdb\x11\x8d\xfc\x96\x2d\xe1\x04\x19\x71\x5f\x58\x56\x7f\xbe\xbc\x68\x03\x52\x37\x70\x9e\xf5\xe9\x2c\x84\x59\xa1\xf2\x0e\x14\xd3\x45\x08\x7e\xf5\xe9\xba\x2a\xa1\x11\x9e\xfe\x03\x27\xf0\x66\x94\x8f\x9e\xd2\x4f\xf2\xbe\x05\x6a\x8d\xb3\xbb\x6b\xd3\x71\x74\xe3\x07\xf0\xc7\x19\x84\xf5\x89\xc3\x0f\xea\x77\x97\x1a\xeb\x38\xf6\x85\x6b\x77\x54\xc4\xd3\x38\xa5\xc9\x10\xfd\xe3\x8b\xbf\xae\x2e\x65\x83\x4e\x2d\xa7\x21\x65\x00\x52\x87\xce\x33\x7f\x8a\xb1\x39\xa8\xba\x01\x00\x21\x85\x83\xad\xf6\x85\x75\x28\xbe\x83\x2c\xc3\x81\x48\x7d\xa9\xc3\x88\xfc\x48\x17\xf3\x80\x15\xd6\x61\x75\xdf\x06\x15\x27\x1c\x88\x1d\x75\xaa\x38\x84\x00\xc7\xa9\x02\x36\xa8\xa3\xa0\xd4\x77\x38\x80\xbd\x29\x88\xe5\x3c\x63\xf5\x9e\x82\x5f\x5e\x5e\xa8\xea\x28\x30\xc8\x84\xd5\x35\x8d\x44\xeb\x1c\x0c\xb4\x11\xfd\xbe\xcb\xfc\x0a\x74\xc0\x8e\xa2\x41\x04\xfd\x07\xa9\x04\xc2\x88\x6e\x88\x46\xac\x11\xd5\x4b\x7f\x8d\xd8\x13\x7f\x06\xac\xdc\xd8\x9f\x54\x04\x00\x71\x06\x72\xd4\xac\xe3\xad\x3c\x07\xf1\x37\x33\x1a\x80\x05\xe9\x22\x29\x0f\xab\x9d\xf5\xda\x88\x10\xf4\x84\x22\x1b\xb8\x21\x28\x13\xd5\xca\x44\x47\xe1\xc0\x79\x0e\x60\x21\x9c\xd1\xe2\x24\x8b\xd8\x71\x09\xe2\x0e\x84\x8d\xec\xe0\xc8\xff\xcf\xff\xd9\xdd\xfd\xe1\xbf\x8f\xfc\xc0\x60\x1b\xee\xef\xaf\xd7\x5a\x49\xcd\x29\xc2\xd8\x74\xa3\x9a\x1b\x73\x27\xee\xcc\xef\x1c\xb8\x73\x60\x9a\x42\x60\x29\xa6\xe9\xd1\x1c\x98\x42\xa4\x8d\xe7\x37\xee\x7c\x7f\x5f\x6b\x9d\xf9\x70\xf4\xa5\xe5\xcc\xe3\x70\xe4\x2b\x6d\xab\x67\x39\x6e\xee\x53\xf7\xb3\x7f\xe0\x16\x7e\xa6\xf0\x5d\xee\x3f\x66\x70\xba\xec\x0f\x06\xc2\x97\x13\x3f\x1b\x7f\xbe\x71\xa3\xdd\x5d\xb9\x0c\xce\xe6\x10\xde\xfa\x23\x1f\x4f\x6e\xde\x73\x40\xe7\x98\x6d\x76\xdf\xfd\xec\x78\xf7\x59\x9c\x0a\xfa\x87\x9f\x7d\xbf\xe8\x1e\x00\x3c\x57\xcc\x1d\x57\x62\x76\x04\x19\x91\x5c\xe2\x34\x8b\x97\x54\x36\x73\xe7\xdd\x03\x97\xba\x30\x9c\xb9\x9f\xf7\xf7\x5d\xcd\x64\xb2\xbb\xfb\xf9\xc8\x2f\x9c\xe7\x99\xff\x30\x66\x5e\x96\xdf\x78\x21\x4d\x12\x40\xc8\xc1\x0a\x30\x50\x06\x50\x91\x1e\xd6\x22\x06\x73\x19\x83\x56\xd7\x42\x44\x67\xe2\xe7\x3a\xb6\xa0\x86\xe3\x16\xe8\xd2\x09\xed\x89\xe3\xc8\x33\x30\xa6\x5e\x62\x5b\xc3\x65\x2e\x5b\x03\x1c\xa3\x17\x29\x8f\xa7\x90\x34\x24\x80\xf0\xef\x1e\xf4\x21\xd1\x4b\x36\x65\x05\x34\xf1\x64\xc1\x5c\x32\xa7\x0f\x90\x37\xe2\x66\x07\xb1\x0b\x36\x61\x05\x4b\x43\x40\x10\x00\x62\x83\x8a\xeb\x4c\x96\x30\x2c\x8a\x50\x43\xcb\x99\x58\xfe\x27\x2b\xb2\x2e\x92\xc5\xea\x11\xb1\xa5\xe5\x5a\x30\x35\x5f\x1c\x5f\x9d\x8e\xce\x6f\x3f\x1d\x5f\xfd\xe9\xf6\xf4\xec\x6c\xf8\xff\xc7\x67\xb7\xc7\x17\x17\xc7\x7f\xbf\x3d\x3d\xff\x30\xfc\x9b\x25\x0c\x23\x2d\xe8\x42\x1f\x02\xa5\x70\x3a\x84\x89\xde\x9e\xb8\x07\x7d\x07\x35\x97\x06\x92\xea\x59\x70\x7c\x47\xf5\xd1\x54\xbb\xbb\x93\xa3\xca\x04\x4d\x8d\xaf\xf0\x62\x0a\x2f\x8f\x27\x71\x25\x0d\xf9\xf9\xfa\xf2\x8a\x9c\x8f\xae\xf0\x3e\x61\x0a\x46\x85\x62\x0a\x62\x53\x79\x8b\x25\x2b\x04\x81\xf2\xa2\xd4\xe2\x58\x01\xb5\xb2\x0d\x55\x7e\x39\x3e\xbb\x1e\xde\x8e\xae\xaf\x6e\x47\x3f\xdd\xfe\x38\xba\x3e\xff\x70\xd9\xd6\x62\xe6\xdf\x7f\xc1\x99\x6b\x74\x17\xf6\x54\x70\x7e\xf7\xa0\x03\x19\x2e\x24\x1c\x81\x6b\x7f\xb3\xb0\xc2\x4e\x60\xa9\x60\x79\x42\x21\xec\x7a\xbf\x1d\xf4\xa6\x2e\x86\x9c\xb1\xd4\xc7\x25\x80\x85\x60\x52\xc1\x13\x7f\x81\x5f\x2e\x42\xb9\x4a\x3d\x32\xab\x53\x8f\xd9\x90\xd9\x6e\x04\x22\x8b\xc0\x52\xd5\xb0\xe3\xab\x52\x1b\xbc\xbc\xa8\x2a\x08\x6f\x53\x3b\x68\xc5\xd5\x08\x9a\x82\xb8\x45\x24\xb1\xfc\xad\xa2\xbe\xa6\x31\xed\x05\x36\xbf\x3d\x3e\xbf\x1d\xfd\xf8\x71\x78\x72\x65\x01\x3f\x4c\x76\xac\x66\x9d\x78\x1c\xa0\xd0\xaf\x51\xbd\xcb\xf2\x3b\xa2\xee\xfa\x57\x15\x0f\x18\x0d\xd0\x4d\x59\x05\xc5\x89\x6a\x03\xe8\xb0\x8b\x9f\x4e\xba\xff\xf5\xbf\xfd\xb7\x0d\xfe\xa3\x4f\x10\x6a\xe0\xb4\xd3\x0f\x26\xf3\xaa\x43\xd4\xca\xca\x2c\x7e\x4d\x16\xdc\xdc\x94\x86\x56\xb7\x5e\x9b\xb1\xbe\xc9\xd2\xb6\xe6\xd9\x23\xc3\xe8\x45\xb5\x5f\x5e\xac\x30\xcb\x57\xd5\x27\xf8\x7d\x8b\x48\x93\x22\x9b\xbf\x2a\x12\x6e\x6e\x8a\xa4\x6e\x6e\x89\x8d\x83\x7a\x1c\xd2\x20\x61\x68\x9a\x3b\xe4\x7d\x07\x2e\x8a\xc8\x1d\xf2\xbd\x33\x4c\xe8\x34\xc4\xff\xe9\x62\xf4\xf3\xed\xc5\xf0\x2f\xd7\xa7\x17\xc3\x96\xfc\x2a\xf9\x94\xf8\x2a\x1e\x8d\x15\xbc\x4f\x35\x14\xd2\x55\x2e\xf0\x44\xf5\x78\x55\x13\xb1\xfb\xed\xaa\x80\x18\x77\x2e\xb9\x53\xfc\x95\x52\xc8\xfb\x75\xa5\x64\xd2\x6e\xd3\x2a\xc2\x46\xa9\x34\x13\x72\x3f\xcb\xf6\x1b\xb4\x5b\x4a\xd5\x46\x66\x50\x7c\x36\x56\x91\xd2\x04\x4a\xff\x6c\x1f\x7a\x82\x78\x69\x2a\x7b\x42\x53\xa1\x11\x2b\xa0\x69\xcd\x31\x53\x84\x16\xb5\xbc\x84\x96\xa2\xde\x44\x8c\xc7\x05\x44\x33\x32\xdf\x8c\xaa\x93\xe3\x73\x91\x4e\x1f\xb4\x0a\xba\x98\x6c\x71\x47\xc1\x5a\x01\x77\x3b\x65\xb5\x7f\x30\xe5\xa5\x92\x20\x2e\xfb\xa2\xb8\x28\x58\x43\x52\x2a\xe4\xc3\xfa\x59\xd6\x3f\x55\xb2\x65\xcc\xcb\x4d\x99\xaf\xcf\x2f\x86\x97\xa3\xb3\x5f\x8e\x7f\x3c\x1b\x6e\x4a\xfd\xa5\x94\x10\x9e\xb8\xf7\x9f\xb3\xfc\x50\x8a\xee\x22\xd7\x43\x99\x16\xae\x08\x9a\x43\x19\x63\x6b\xf7\x01\x66\x11\xd5\x6f\x99\x3d\xbe\xbf\x51\xde\x7d\x80\xb4\xfa\x92\x3c\xc0\xea\xc1\x4b\xe9\xfc\xf7\xe8\x8f\xdc\xbf\xd5\x02\x22\x99\xb6\x5a\xa0\xae\xc2\x13\x39\x9c\xc3\x01\x4a\x8d\x98\xb4\x55\x68\xc5\xc9\x01\x0e\x56\x9f\x17\xd8\x8a\xcd\x5b\xf1\xaa\x3b\x5d\x42\x60\x0f\xcf\x4f\x86\x55\xb1\x15\x1d\xd6\x12\x16\x80\x31\xde\x37\xae\x5d\x5a\xb7\x46\x50\xd3\xdd\x48\x76\x0d\x1c\x59\x40\x34\xea\x76\xfa\x8e\x98\x28\xf4\x8d\x0a\x0c\x7f\x83\xf0\x9d\x1e\xfe\x60\x8e\x73\x5a\xf3\x0d\x1d\x87\x30\x65\x3a\x6b\x75\x8d\x23\x62\x8b\x99\x3f\x76\x26\xd5\x58\xcd\x06\x52\x35\xb6\xc6\xd6\xde\xa1\xf2\x16\x43\xba\x7a\x0a\xb9\x65\x5c\x66\x2a\x8c\x91\x68\x29\x1e\x9c\xf6\xf9\x7b\xe3\xfd\xd0\x3c\x32\x88\x21\xd5\x1f\xdf\xe8\x91\x30\xc4\x42\x41\x1d\xda\x3e\xc1\x84\x50\x96\x02\xf9\x7b\x35\x8c\xab\x8a\x43\xb0\x5e\xdb\x38\x6a\x3f\xe3\xaf\x25\xcd\x13\x53\x75\x64\x18\x07\x37\x7e\xa5\x33\xcc\x49\x30\xbf\xba\x32\xbb\xb6\xc3\xab\x1f\x55\x11\x4d\xc1\x8a\xdc\xfc\x76\xe2\x1b\xa4\xf1\x20\x24\x86\xe3\x8d\x74\x10\x98\x18\x93\xeb\x4a\x9f\xc8\x0e\xdd\x31\xbb\x01\xcf\xe2\x8b\x80\x57\xa5\xa0\x8d\xd1\x80\xc1\x1a\x68\x00\x88\x61\x46\x26\x19\x93\x92\x21\x38\x0a\x87\x49\xfa\x47\x0a\xf7\xcd\x8c\xb1\xc6\x9b\x8c\x43\x6d\xc3\x40\x86\x60\x6d\x45\x67\xed\xa2\x18\x2d\x8b\xd7\xfb\x3e\x5a\x7d\xbd\x76\xef\xbf\xe4\x75\x51\xe7\x43\x9c\x92\xfa\x26\xe9\xaf\xba\xdf\x40\x3c\x70\xfe\x8d\x00\x88\x3d\x7c\x48\x7b\xc7\x1e\x3e\xa4\x09\x62\xf1\xcb\xa5\x54\x30\xf6\xf0\x81\x05\xb0\xa5\x88\xf3\xfc\xe0\x49\x21\x8d\xfc\x86\xa1\x50\x1f\xea\xe4\x88\xab\xb5\xaa\x5f\xdb\x49\x13\xc8\x63\x7f\x43\x48\xf8\x72\xea\x13\xeb\xa6\x35\x8c\xc3\xe3\x2b\xa9\x88\x54\xe3\x2d\x12\x82\x61\x1a\x84\xdb\x86\xab\x93\x0c\x8c\xf8\x5a\x74\xe3\x9b\x8c\x6e\xfa\xd5\x20\xab\x95\xaa\xe2\xec\x8b\xc6\xdf\x22\x49\xab\xa8\x52\x07\xda\xca\xb6\xeb\xf9\x57\x22\xb3\x19\x97\xeb\xf5\x60\xea\x8b\x7f\x1c\xe2\xc5\x5c\x3c\xdf\x37\xbe\xb6\x09\x40\x45\x49\x83\x5e\xa7\xae\x3a\xfc\x6a\x84\xac\x8a\xf6\xda\x55\x95\xd6\x8f\x06\xe2\x5f\x03\xf8\xaf\xdc\xb8\xa8\x03\x81\x3b\x71\x9e\xa9\xd9\x17\x1c\x99\x00\xea\xb7\x04\x3f\x90\x9f\xd8\x39\xfd\x50\xbe\x8b\x43\x8c\x1f\xc9\x0f\xdd\x2d\x7d\x26\x17\xca\x82\x31\x7f\x52\x9d\x41\xf4\x0d\x15\xf0\xa3\x8e\x1b\xac\xed\xc6\xfd\x90\x33\xa0\xde\x47\x9e\xa5\xa2\xf1\xc9\x1b\xa3\x04\x14\xa8\xdf\x74\xe7\xf1\x59\xfd\x85\xf4\xd7\xb6\xbe\x54\x7a\x79\xa9\xdf\xfd\xe7\x35\x34\x3a\xe3\xce\x48\xcf\xd8\x6c\x89\xff\xbc\x0a\x0f\xfe\xea\x4d\x99\xa9\x75\xcd\xee\x56\xbb\x9a\x57\x0d\x50\x2d\xb5\x61\x40\xba\x0d\xa0\xac\xd0\x50\x2d\x05\x6b\xd0\xe6\x86\x86\x6f\x83\x29\x4b\xed\xfc\x2b\x00\x00\xff\xff\x49\xa3\xe0\x98\x17\x27\x00\x00")

func realtimeJsBytes() ([]byte, error) {
	return bindataRead(
		_realtimeJs,
		"realtime.js",
	)
}

func realtimeJs() (*asset, error) {
	bytes, err := realtimeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "realtime.js", size: 10007, mode: os.FileMode(420), modTime: time.Unix(1440814262, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"realtime.js": realtimeJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"realtime.js": &bintree{realtimeJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

