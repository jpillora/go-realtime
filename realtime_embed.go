// Code generated by go-bindata.
// sources:
// realtime.js
// DO NOT EDIT!

package realtime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _realtimeJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x1a\x6b\x57\xe3\xc6\xf5\x3b\xbf\x62\xac\xb3\x25\x12\xc8\xb2\xd9\x34\x7d\xa0\x15\x5b\xc2\x3a\x2d\x5b\x82\xb7\x3c\xd2\xf6\x38\x14\x46\xd2\xd8\x16\xc8\x92\x56\x92\x01\x17\x94\xdf\xde\x7b\x67\x46\xa3\x91\x6c\x76\xc9\x69\x72\x4e\x90\x34\x73\xdf\xef\x19\xef\x60\x87\xcc\xe2\xd4\xa7\x31\x79\x88\x92\x30\x7d\xb0\xff\xc9\xfc\xf3\x34\xb8\x63\x25\xd9\x19\x6c\x0d\x06\xe4\x8c\xd1\xb8\x8c\x16\x8c\xf4\xc9\xfd\xd0\xd9\x73\x86\xf0\x32\x2f\xcb\xac\xd8\x1f\x0c\x66\x51\x39\x5f\xfa\x4e\x90\x2e\x06\xb7\x59\x14\xc7\x69\x4e\x07\xb3\xb4\x9f\x4b\x14\x44\xff\x48\x11\xf7\x93\xd8\x24\xef\x42\x76\xff\x97\x1a\x14\xf1\x0e\x80\xda\x8f\xc7\x17\xe4\x28\xcd\x56\x79\x34\x9b\x97\xe4\xed\x70\xef\xbb\x2d\x73\xba\x4c\x82\x32\x4a\x13\x53\x4a\x45\xc2\x34\x58\x2e\x58\x52\x5a\xe4\x69\x6b\x8b\x90\x68\x6a\xf6\xc4\x96\xa3\x04\xb6\x60\x9d\x90\x9c\x95\xcb\x3c\x21\x34\x66\x79\x69\x1a\x9a\x34\xfb\xa4\x9c\x47\x05\xf1\xf3\xf4\xa1\x60\x39\x10\x64\x05\x49\xd2\x92\x14\xcb\x2c\x4b\xf3\x92\x28\x3a\x85\x61\xb9\xc8\x63\x30\xa8\x51\x49\x96\xa7\x65\x1a\xa4\x31\xb9\x67\x79\x01\x62\xc1\xee\x3d\xcd\xc5\x32\xf1\x88\x71\xbf\x67\x48\x94\x6c\xe9\xc7\x51\x40\x16\xac\x9c\xa7\xa1\x04\x53\x64\x3c\xa2\xf4\x5a\xe6\x31\xaa\x82\x12\x73\x90\x12\x36\x13\xf6\xa0\xcc\xcd\x01\x5c\xa1\x51\x59\x38\xd9\xb2\x98\x9b\x79\x59\xaf\x08\x1d\xf3\x12\x3f\x2b\xfc\x53\xb3\x70\x6a\x91\xf8\xb3\xb5\x93\x26\x71\x94\xa0\x0c\x65\xbe\x64\x2e\x17\xb6\x98\x83\xe2\xc1\xb2\xd4\xc1\x68\x18\xea\x72\xde\xb1\x95\x4d\x52\xff\x16\xfe\x24\xcb\x2c\xa4\x25\x5b\x13\xbb\x46\x35\x95\xbc\x48\x64\x13\xe6\x66\xe9\x85\x28\x19\x0b\x22\x88\xc2\x05\xcb\x67\x18\x6b\xd1\x2c\x49\x73\x46\xde\x80\x1e\x19\x78\x32\x62\x05\x07\x23\x8f\xe4\x5d\x9f\xac\xa4\x61\x05\xb0\x26\xed\xa3\x4d\x56\xb5\x7c\xd1\x94\x98\xbd\x47\xf2\xfc\x4c\xca\x55\xc6\xd2\x29\xa0\xf6\x3c\xf0\x15\x88\xc4\x82\xd2\x80\x0d\x0e\x46\x48\x6f\xa5\x01\xad\x5a\x40\x96\x04\x91\x22\xaf\x5c\xa5\xf9\x9d\xab\x98\x3c\x92\x28\x29\x4a\x9a\x04\x88\x7f\x98\xe7\x74\x45\xb6\xb7\x81\x50\x77\xb5\x26\xf6\x30\x8f\x62\x06\x68\x4e\xcc\x92\x59\x39\x27\x07\x64\x25\x5f\x6b\x08\x42\x1e\x9d\x2c\xcd\x6a\x83\xb2\xb8\x60\x72\x67\x9a\xe6\xc4\xbc\x03\xd2\xe4\xb1\x01\x46\x21\xee\x26\xc3\x2b\x21\xfa\x1b\x03\xd9\xf7\x04\xd4\xca\x6a\xc0\x08\x09\x59\xcc\x4a\x46\x1e\x27\x77\x57\x82\x72\x43\x4e\x49\x87\x9b\x60\x52\x6e\x5a\x13\x3f\xc0\xa4\xf0\xb7\xed\xbb\xc7\xc6\x75\x22\x0c\x0a\x40\x99\x5c\x89\xa8\x92\xf5\x04\x94\x2f\x97\x05\x09\xe6\x34\x01\x27\xc1\xdf\x10\x52\x12\x00\x6a\x67\x41\x58\x08\x10\x93\xdd\xcb\xc4\x16\x1c\xba\xf1\x9a\xd0\xfb\x68\x46\xcb\x34\x87\xa5\x13\x58\x52\xa2\x9b\xc8\x3b\x02\x88\xa1\x0b\x8f\x77\x3c\x51\x84\x21\xe1\x7b\x77\xb7\xa6\xc8\xab\x45\x97\x2c\x98\x08\xc0\x27\xd1\x95\x43\x97\x40\x9a\x95\xf9\xaa\xb1\x94\xdc\xe1\xab\xb5\x13\xaa\x2d\xf1\xbf\xac\x3a\x10\xe1\x23\x14\xfb\x24\x2a\x4a\x96\xb0\xdc\xfc\x46\x10\xfe\xc6\x26\x4a\x31\x8e\xf9\x32\xfc\x74\x2a\x11\x34\x78\x6e\xc0\x39\x8b\x21\xe6\x0b\x69\x5c\x6e\x1d\x6e\x5f\x63\xc1\x8a\x82\xce\x98\x61\x1b\x2c\xcf\xd3\x1c\x9e\x90\x1c\x09\x3c\x82\x38\x2d\x98\xc1\xed\x8f\x28\x71\x1a\x00\xbc\xe4\x0c\x1f\x14\xed\x2d\x9c\xa3\xca\x79\x10\xd3\xa2\x80\x44\xcb\x59\x96\xb3\x82\xb3\xa0\xa4\x88\x92\x19\xc4\xe6\x03\xf3\x0b\xd1\x03\xcc\x4b\xac\x95\xe0\xac\x72\xce\x08\xbc\x42\xfd\xeb\x17\x51\xc8\x2c\xdd\x91\xad\x9a\xa5\xb2\xcf\xec\xe1\xa7\xb4\x29\xbc\x62\x9d\x54\x15\xd5\x70\x15\xd4\xe0\x3f\xbc\x9d\xbc\xdf\x1f\x38\x25\x2b\x4a\x4e\xa4\x8d\x06\x1a\x38\xaa\x02\xef\x02\x95\x81\x01\x0f\x5c\x9d\xa7\x45\x09\xaf\x00\xd6\xa5\x67\x02\xc1\x9f\x07\x3f\x0f\x9c\x5d\xeb\xcd\x06\xc2\xe5\x1c\xda\x00\x31\x8e\x93\x7b\x1a\x47\x21\xb9\x3c\x3b\xd9\x27\x86\x4e\x09\x7b\x85\x23\xa5\x7e\x28\x70\xeb\x8c\xcd\x46\x8f\x99\xf3\x66\x4f\x03\x08\xd2\x24\x81\x3a\x51\xc7\x08\x5f\x83\xd2\x81\xde\x7a\xaa\xb4\xb5\x62\xe9\xaf\xad\xd5\x55\x71\x6d\x43\x12\x65\xbc\x0e\x53\xc8\x7d\x57\x86\xde\x59\xab\xc8\x63\xc1\x42\x54\x8e\x08\xe1\xb5\xff\x9a\xa2\xcd\x4d\x24\x4b\x1d\x40\x89\x8a\x51\x94\x39\xf8\xdd\x68\xe2\xbf\x63\x1d\x04\xec\x93\xc5\x12\x6c\xed\x43\x14\x08\x68\xb7\xa1\xd7\x03\x56\x5a\x09\xc5\xaf\x4d\x45\x74\x8d\xae\xd8\xd7\x48\xd3\x44\xae\xe9\xd4\x95\x51\x27\x20\xc7\xd5\x1a\xb1\x0f\xcb\x0c\x1a\x2e\xa8\x28\xc5\xa4\x31\xc4\x58\xb8\x42\x8b\xb0\x50\xd1\x69\x13\x01\xb3\xc1\x7b\x6b\x0f\x3d\x54\xef\x0d\xdb\x58\xb5\x9f\x14\xaa\x5c\x58\xc3\x0f\xf2\xc8\x57\x5d\xb0\xb2\xf9\x43\x3a\x53\x73\x4e\xe3\x0a\x8e\xa8\xca\x8f\xd6\x99\xd5\x66\xbb\x02\xd9\x75\x09\xce\x57\x1b\xe9\x05\x31\xa3\xf9\x05\x04\x48\xba\x2c\xcd\x06\xdf\xa9\xc7\x86\xc6\x9c\x0f\x85\x6e\x47\x8c\x39\x40\x05\xb5\x4c\x1d\xb2\xc7\x77\xa0\x67\xd0\x55\x07\x9a\xaf\x81\xbc\x7b\xc3\xb6\xa9\x1e\x0a\x39\xc5\xa8\x59\xca\xac\xf3\xc8\x26\x46\x5e\xf6\x8d\x5d\x1e\xba\x8a\x0b\x16\xab\x6b\x3e\x96\x79\x9c\x42\xbd\x2e\x6a\x9e\x03\x35\x7e\x44\x83\x79\x33\x0d\x6a\x71\x0c\x40\x98\x9b\x69\x62\xec\x2a\x9b\x11\x41\x0c\xe4\x98\x30\xf4\x14\xff\x82\x57\xc7\x87\x52\x68\xf2\x2f\xc5\xba\xb2\x5a\xa2\x67\x10\xd3\x0e\x4e\x33\x05\x2b\x8f\x93\x12\x2a\x1d\x8d\xcd\x66\x87\x13\xe0\xf8\x36\xf9\x76\x48\x76\x50\xf5\x61\xdb\x2f\x61\x54\xfc\x2a\x67\xab\xd4\x7e\xc9\x09\x75\x04\x89\x55\x9d\xe8\x53\xd7\x49\xba\x3f\x45\x8b\xfe\x4d\x2c\xac\xac\x29\xcc\x8c\x26\x4d\x96\x71\xbc\x6e\xc2\x26\xae\x1c\x9e\x7d\xe7\x25\x26\x24\x16\x01\x15\x09\xce\xd1\xc9\xf8\x7c\xf4\xa1\x13\x49\x0f\xa8\x35\xf4\x2e\xd3\xda\x10\x48\x1a\x2b\x1e\xda\x1b\xfc\x52\xb6\x6d\x05\x7d\x4c\xaf\x83\x90\xa5\xb4\x5d\xf9\xd6\x85\xf4\x5a\x42\x8e\x3f\x8d\x4e\xbb\xa6\x54\x92\x22\x75\x41\xb3\xc5\x14\x05\x79\xd9\xe5\x1c\xc9\xc8\x78\x81\x6d\xcb\x5a\x57\x8c\xaf\xe0\x7e\x3c\x1f\x9f\x3a\xa2\xe8\x46\xd3\x95\xa9\xaa\x8d\xd5\x26\x97\x26\x72\x3a\xd0\xc8\xb5\x06\x2b\x11\x0b\x40\x08\x4c\xcb\x37\x1c\x54\xa5\xf1\x20\x31\xf9\x1e\x16\x6e\x21\x6d\x27\x92\x34\x22\xb2\x20\x2a\x97\x41\x3c\x37\x41\xd3\x74\x35\x2e\x79\x46\x73\x70\x2f\x90\x6e\x32\x8f\x40\xb9\x86\x98\x83\x19\x46\x0f\x36\x69\x6c\xc8\xa1\x22\x8d\x99\xf3\x40\xf3\x04\x41\x6c\xd2\xc2\xdd\x6a\x06\xe1\xee\xf8\x27\x19\x6f\x1e\x01\xa5\xe0\x00\x5d\x57\xf3\xe8\xca\x6d\xed\x61\xfb\x80\x5d\xe7\xef\x6c\xd5\xde\x08\x8b\x52\x26\x4f\xd3\x41\xda\x10\x45\x1e\x70\xd4\x0f\x9a\x41\x45\x76\xe2\x0e\x74\xc6\x1e\xd0\xd0\x07\x71\x50\xb2\x8c\x12\x2c\xf6\x3a\x34\x10\x60\x31\x44\x97\x06\x78\x5b\xa4\x49\x86\xd6\x72\x68\x96\xc5\x2b\x13\xe8\xd8\xc8\xce\x6a\xd8\x68\xa7\x03\xfc\x4f\x0c\xee\x1a\x9c\xce\x41\x76\x68\xd8\x75\xde\x70\x82\xc2\xdf\x75\xc0\x18\xad\xc3\x82\x02\x32\x75\x2a\xa8\x6f\xdd\x01\x95\x59\x5a\x2d\xd2\xdd\xc0\xb1\xc1\x78\x91\x5f\x0d\xd2\xe2\xb6\xd6\x9b\x97\xce\x4f\xe2\x08\xde\x44\x84\x78\xc2\x11\x72\x19\x04\x90\x02\xd3\x25\x9c\x22\x8b\x19\xc1\xa9\x16\x86\x5a\x51\x6e\x83\x74\x89\xc5\x43\x4f\xae\xb5\x26\xa6\x12\x09\x87\xea\x97\x93\x52\x1f\xcf\xf4\x86\xad\x46\x95\x7a\x9a\x27\xad\x4f\x13\x61\xad\x57\xcd\x0c\x69\xc2\x6b\xe2\xeb\x44\x68\xb5\x91\xaf\xc9\xc0\x81\xdb\x42\x08\x33\xec\x78\xe4\x6d\x97\x48\x73\x30\xd2\xb2\x48\x1f\x2b\x44\xb7\x6c\x0d\x1c\x52\xb2\x56\xbf\xd4\xc6\x88\xb6\xd3\x94\xba\xfc\x34\xa3\xd7\x2d\xbd\x32\xc0\xa1\xbf\xae\x09\x1c\xce\x34\x9a\xe3\x89\x44\xfc\x5d\x61\xd8\xf8\xae\x1f\xd5\xc4\x71\x47\x5c\xc7\x44\x3c\x43\xe4\x79\x48\xbb\x8d\xa9\x5f\xdd\xad\x6a\xed\xa2\xc9\x26\xcb\x24\x64\x53\x38\xa1\x85\x58\x69\xb7\x06\x3b\xbd\xad\x9d\x4d\x37\x5f\xd0\x46\x72\x19\x5e\xfd\x8f\x34\xb8\x1b\x60\xd9\xeb\x7f\xc2\xa4\x05\x04\x4c\xe0\x3e\xcf\xe0\x7e\x08\x93\x2a\x7b\x74\xe0\x74\x20\x6f\x91\xf6\xc9\xd0\xf9\xce\x79\x0b\x50\x66\x60\xe1\xc5\xd7\xb7\xe4\x63\x0a\xdd\x38\x5a\x40\x47\x2a\x30\x5c\x77\xf8\xe5\x18\x68\xc0\x12\x50\x61\x67\xb0\xc5\xdb\xf9\x35\x7b\x84\x33\x64\x58\x78\xdc\xb2\xea\xf3\xf9\x59\x19\x90\xda\xbe\xf5\xa4\xce\x67\x01\x4c\x0c\xb5\x77\xa0\x98\x2e\x03\xf0\xab\x47\xab\xba\x84\x86\x78\xfe\xf7\x2d\xdf\x99\xd3\x62\xfc\x90\x7c\x12\x37\x2e\x50\x6b\xac\xed\x6d\x93\x4e\xc2\x2b\xcf\x87\x3f\x96\x1b\x34\xe7\x0e\xcf\x6f\xde\x6d\xaa\xad\xe3\xf0\x17\x54\xf6\x38\x8f\x66\x51\x42\xe3\x11\xfa\xc7\xe3\x7f\x6d\x55\xca\xdc\x5e\x23\xa7\x26\xa5\x0f\x52\x07\xd6\x53\xf1\x10\x61\x73\x90\x75\x03\x00\x02\x0a\x47\x5b\xe5\x0b\x63\x9f\x7f\xfb\x69\x8a\x63\x91\xfc\x92\x47\x12\xf1\x91\x2c\x17\x3e\xcb\x8d\xfd\xfa\x22\x10\x2a\x4e\xe0\xf2\x1d\x79\xb6\xd8\x87\x00\xc7\xd9\x02\x36\xa8\x25\xa1\xe4\x77\xe0\xc2\xde\x0c\xc4\xb2\x9e\xb0\x7a\xcf\xc0\x2f\xcf\xcf\x54\x76\x14\x18\x67\x82\xfa\xa2\x46\xa0\xf5\xf6\x5c\x65\x44\x6f\x68\x33\xaf\x06\x75\xd9\x41\xe8\x86\xd0\x7f\x90\x8a\xcf\x8d\x68\x07\x68\xc4\x06\x51\xbe\x0c\x2b\xc4\x9e\x7a\x73\x60\x65\x47\xde\xb4\x26\x00\x88\x73\x90\xa3\x61\x1d\x6d\xe4\xe9\x46\xaf\x66\xe4\x82\x05\xe9\x32\x2e\xf7\xeb\x9d\xaa\xd2\x22\x04\x3d\x21\xc9\xfa\x76\x00\xca\x84\x8d\x32\xe1\x41\xe0\x5a\x4f\x3e\x2c\x04\x73\x9a\x1f\xa5\x21\x3b\x2c\x41\x5c\x97\xdb\xc8\xf4\x0f\xbc\xdf\xff\x69\x7b\xfb\xbb\x3f\x1e\x78\xbe\xc6\x36\xd8\xdd\xad\x2a\xa5\xa4\xe2\x14\x62\x6c\xda\x61\xc3\x8d\xd9\x53\x7b\xee\xf5\xf6\xec\x05\x30\x4d\x20\xb0\x24\xd3\xe4\x60\x01\x4c\x21\xd2\x26\x8b\x2b\x7b\xb1\xbb\xab\xb4\x4e\x3d\x38\x00\xd3\x72\xee\x14\x70\xf0\x2b\x4d\x63\x60\x58\x76\xe6\x51\xfb\xb3\xb7\x67\xe7\x5e\x2a\xf1\xed\xc2\xbb\x4f\xe1\x8c\x39\x74\x5d\xee\xcb\xa9\x97\x4e\x3e\x5f\xd9\xe1\xf6\xb6\x58\x06\x67\x17\x10\xde\xea\x23\x9b\x4c\xaf\xde\x17\x80\x5e\x60\xb6\x99\x43\xfb\xb3\xe5\xdc\xa6\x51\xc2\xe9\xef\x7f\xf6\xbc\xbc\xbf\x07\xf0\x85\x64\x6e\xd9\x02\xb3\xc7\xc9\xf0\xe4\xe2\x67\x5a\xbc\xa6\x32\x99\xbd\xe8\xef\xd9\xd4\x86\x11\xcd\xfe\xbc\xbb\x6b\x2b\x26\xd3\xed\xed\xcf\x07\x5e\x6e\x3d\xcd\xbd\xbb\x09\x73\xd2\xec\xca\x09\x68\x1c\x03\x42\x06\x56\x80\xb1\xd2\x87\x8a\x74\x57\xf1\x18\xcc\x44\x0c\x1a\x7d\x03\x11\xad\xa9\x97\xa9\xd8\x82\x1a\x8e\x5b\xa0\x4b\x2f\x30\xa7\x96\x25\x4e\xc2\x98\x7a\xb1\x69\x8c\x1e\x33\xd1\x1a\xe0\x30\xbd\x4c\x8a\x68\x06\x49\x43\x7c\x08\xff\xfe\xde\x10\x12\xbd\x64\x33\x96\x43\x13\x8f\x97\xcc\x26\x0b\x7a\x07\x79\xc3\xef\x76\x10\x3b\x67\x53\x96\xb3\x24\x00\x04\x0e\xc0\x37\x28\xbf\xd0\x64\x31\xc3\xa2\x08\x35\xb4\x9c\xf3\xe5\xff\xb2\x3c\xed\x23\x59\xac\x1e\x21\x7b\x34\x6c\x03\x66\xe7\xb3\xc3\x8b\xe3\xf1\xe9\xf5\xa7\xc3\x8b\xbf\x5d\x1f\x9f\x9c\x8c\xfe\x7a\x78\x72\x7d\x78\x76\x76\xf8\xef\xeb\xe3\xd3\x0f\xa3\x7f\x19\xdc\x30\xc2\x82\x36\xf4\x21\x50\x0a\xa7\x43\x98\xeb\xcd\xa9\xbd\x37\xb4\x50\x73\x61\x20\xa1\x9e\x01\x87\x78\x54\x1f\x4d\xb5\xbd\x3d\x3d\xa8\x4d\xd0\xd6\xf8\x02\xaf\xa6\xf0\xfa\x78\x1a\xd5\xd2\x90\x1f\x2f\xcf\x2f\xc8\xe9\xf8\x02\x6f\x15\x66\x60\x54\x28\xa6\x20\x36\x15\xf7\x58\xa2\x42\x10\x28\x2f\x52\xad\x02\x2b\xa0\x52\xb6\xa5\xca\x4f\x87\x27\x97\xa3\xeb\xf1\xe5\xc5\xf5\xf8\x87\xeb\xef\xc7\x97\xa7\x1f\xce\xbb\x5a\xcc\xbd\xdb\x2f\x38\xb3\x42\x77\x61\x4f\x05\xe7\xf7\xf7\x7a\x90\xe1\x5c\xc2\x31\xb8\xf6\x17\x03\x2b\xec\x14\x96\x72\x96\xc5\x14\xc2\x6e\xf0\xcb\xde\x60\x66\x63\xc8\x69\x4b\x43\x5c\x02\x58\x08\x26\x19\x3c\xd1\x17\xf8\x65\x3c\x94\xeb\xd4\x23\xf3\x26\xf5\x98\x09\x99\x6d\x87\x20\x32\x0f\x2c\x59\x0d\x7b\x9e\x2c\xb5\xfe\xf3\xb3\xac\x82\xf0\x36\x33\xfd\x4e\x5c\x8d\xa1\x29\xf0\x7b\x44\x12\x89\xdf\x4d\x9a\xcb\x1a\xdd\x5e\x60\xf3\xeb\xc3\xd3\xeb\xf1\xf7\x1f\x47\x47\x17\x06\xf0\xc3\x64\xc7\x6a\xd6\x8b\x26\x3e\x0a\xfd\x12\xd5\x9b\x34\xbb\x21\xf2\xb6\x7f\x55\xf3\x80\xd1\x00\xdd\x94\xd6\x50\x05\x91\x6d\x00\x1d\x76\xf6\xc3\x51\xff\x0f\x7f\x1e\xbe\x6d\xf1\x1f\x7f\x82\x50\x03\xa7\x1d\x7f\xd0\x99\xd7\x1d\xa2\x51\x56\x64\xf1\x4b\xb2\xe0\xe6\xba\x34\xb4\xbe\xfb\x5a\x8f\xf5\x75\x96\xa6\xb1\x48\xef\x19\x46\x2f\xaa\xfd\xfc\x6c\x04\x69\xb6\xaa\x3f\xc1\xef\x1b\x44\x9a\xe6\xe9\xe2\x45\x91\x70\x73\x5d\x24\x79\x77\x4b\x4c\x1c\xd4\xa3\x80\xfa\x31\x43\xd3\xdc\x20\xef\x1b\x70\x51\x48\x6e\x90\xef\x8d\x66\x42\xab\x25\xfe\x0f\x67\xe3\x1f\xaf\xcf\x46\xff\xb8\x3c\x3e\x1b\x75\xe4\x97\xc9\x27\xc5\x97\xf1\xa8\xad\xe0\xa5\xaa\xa6\x90\xaa\x72\xbe\xc3\xab\xc7\x8b\x9a\xf0\xdd\xd7\xab\x02\x62\xdc\xd8\xe4\x46\xf2\x97\x4a\x21\xef\x97\x95\x12\x49\xbb\x49\xab\x10\x1b\xa5\xd4\x8c\xcb\xfd\x24\xda\xaf\xdf\x6d\x29\x75\x1b\x99\x43\xf1\x59\x5b\x45\x4a\x53\x28\xfd\xf3\x5d\xe8\x09\xfc\xa5\xad\xec\x11\x4d\xb8\x46\x2c\x87\xa6\xb5\xc0\x4c\xe1\x5a\x34\xf2\x12\x5a\xf2\x7a\x13\xb2\x22\xca\x21\x9a\x91\xf9\x7a\x54\x1d\x1d\x9e\xf2\x74\xfa\xa0\x54\x50\xc5\x64\x83\x3b\x72\xd6\x09\xb8\xeb\x19\x6b\xfc\x83\x29\x2f\x94\x04\x71\xd9\x17\xc5\x45\xc1\x5a\x92\x52\x2e\x1f\xd6\xcf\xb2\xf9\xd9\x94\x3d\x46\x45\xb9\x2e\xf3\xe5\xe9\xd9\xe8\x7c\x7c\xf2\xd3\xe1\xf7\x27\xa3\x75\xa9\xbf\x94\x12\xdc\x13\xb7\xde\x53\x9a\xed\x0b\xd1\x6d\xe4\xba\x2f\xd2\xc2\xe6\x41\xb3\x2f\x62\xac\xb2\xef\x60\x16\x91\xfd\x96\x99\x93\xdb\x2b\xe9\xdd\x3b\x48\xab\x2f\xc9\x03\xac\xee\x9c\x84\x2e\x7e\x8d\xfe\xc8\xfd\xb5\x16\xe0\xc9\xb4\xd1\x02\x4d\x15\x9e\x8a\xe1\x1c\x0e\x50\x72\xc4\xa4\x9d\x42\xcb\x4f\x0e\x70\xb0\xfa\xbc\xc4\x56\xac\xdf\x8d\xd7\xdd\xe9\x1c\x02\x7b\x74\x7a\x34\xaa\x8b\x2d\xef\xb0\x06\xb7\x00\x8c\xf1\x9e\x76\xed\xd2\xb9\x3b\x82\x9a\x6e\x87\xa2\x6b\xe0\xc8\x02\xa2\x51\xbb\x37\xb4\xf8\x44\xa1\x6e\x54\x60\xf8\x73\x83\x77\x6a\xf8\x83\x39\xce\xea\xcc\x37\x74\x12\xc0\x94\x69\x55\xf2\x1a\x87\xc7\x16\xd3\x7f\xee\x8c\xeb\xb1\x9a\xb9\x42\x35\x56\x61\x6b\xef\x51\x71\x8b\x21\x5c\x3d\x83\xdc\xd2\xae\x34\x25\xc6\x98\xb7\x14\x07\x4e\xfb\xc5\x7b\xed\x7d\x5f\x3f\x32\xf0\x21\xd5\x9b\x5c\xa9\x91\x30\xc0\x42\x41\x2d\xda\x3d\xc1\x04\x50\x96\x7c\xf1\xdb\x39\x8c\xab\x92\x83\x5f\x55\x26\x8e\xda\x4f\xf8\x9b\x49\xfb\xc4\x54\x1f\x19\x26\xfe\x95\x57\xeb\x0c\x73\x12\xcc\xaf\xb6\xc8\xae\xcd\xf0\xf2\x67\x55\x44\x93\xb0\x3c\x37\x5f\x4f\x7c\x8d\x34\x1e\x84\xf8\x70\xbc\x96\x0e\x1c\x13\x63\xb2\xaa\xf5\x09\xcd\xc0\x9e\xb0\x2b\xf0\x2c\xbe\x70\x78\x59\x0a\xba\x18\x2d\x18\xac\x81\x1a\x00\x1f\x66\x44\x92\x31\x21\x19\x82\xa3\x70\x98\xa4\xbf\xa5\x70\xaf\x66\x8c\x35\x5e\x67\x1c\x28\x1b\xfa\x22\x04\x1b\x2b\x5a\x95\x8d\x62\x74\x2c\xde\xec\x7b\x68\xf5\xaa\xb2\x6f\xbf\xe4\x75\x5e\xe7\x03\x9c\x92\x86\x3a\xe9\xaf\xba\x5f\x43\xdc\xb3\xfe\x8f\x00\x88\x1c\x7c\x08\x7b\x47\x0e\x3e\x84\x09\x22\xfe\xf3\xa5\x50\x30\x72\xf0\x81\x05\xb0\xa3\x88\xf5\x74\xe7\x08\x21\xb5\xfc\x86\xa1\x50\x1d\xea\xc4\x88\xab\xb4\x6a\x5e\xbb\x49\xe3\x8b\x63\x7f\x4b\x48\xf8\xb2\x9a\x13\xeb\xba\x35\xb4\xc3\xe3\x0b\xa9\x88\x54\xa3\x0d\x12\x82\x61\x5a\x84\xbb\x86\x6b\x92\x0c\x8c\xf8\x52\x74\xe3\x9b\x88\x6e\xfa\xd5\x20\x6b\x94\xaa\xe3\xec\x8b\xc6\xdf\x20\x49\xa7\xa8\x52\x0b\xda\xca\xa6\x4b\xfa\x17\x22\xb3\x1d\x97\x55\xe5\xce\x3c\xfe\xcf\x43\x9c\xa8\xe0\xcf\xf7\xad\xaf\x4d\x02\x50\x5e\xd2\xa0\xd7\xc9\xab\x0e\xaf\x1e\x21\xeb\xa2\x5d\xd9\xb2\xd2\x7a\xa1\xcb\xff\x3d\x80\xf7\xc2\x8d\x8b\x3c\x10\xd8\x53\xeb\x89\xea\x7d\xc1\x12\x09\x20\x7f\x51\xf0\x7c\xf1\x89\x9d\xd3\x0b\xc4\x3b\x3f\xc4\x78\xa1\xf8\x50\xdd\xd2\x63\x62\xa1\xcc\x19\xf3\xa6\xf5\x19\x44\xdd\x50\x01\x3f\x6a\xd9\x7e\x65\xb6\xee\x87\x2c\x97\x3a\x1f\x8b\x34\xe1\x8d\x4f\xdc\x18\xc5\xa0\x40\xf3\xa6\x3a\x8f\xc7\x9a\x2f\xa4\x5f\x99\xea\x52\xe9\xf9\xb9\x79\xf7\x9e\x2a\x68\x74\xda\x9d\x91\x9a\xb1\xd9\x23\xfe\x53\x2f\x3c\xf8\xcb\x37\x69\xa6\xce\x35\xbb\x5d\xef\x2a\x5e\x0d\x40\xbd\xd4\x85\x01\xe9\xd6\x80\xd2\x5c\x41\x75\x14\x6c\x40\xdb\x1b\x0a\xbe\x0b\x26\x2d\xf5\xbf\x00\x00\x00\xff\xff\xac\xb8\xd2\xcd\xaf\x27\x00\x00")

func realtimeJsBytes() ([]byte, error) {
	return bindataRead(
		_realtimeJs,
		"realtime.js",
	)
}

func realtimeJs() (*asset, error) {
	bytes, err := realtimeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "realtime.js", size: 10159, mode: os.FileMode(420), modTime: time.Unix(1436593683, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"realtime.js": realtimeJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"realtime.js": &bintree{realtimeJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

