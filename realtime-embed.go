// Code generated by go-bindata.
// sources:
// realtime.js
// DO NOT EDIT!

package realtime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _realtimeJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x1a\x6b\x57\xe3\xc6\xf5\x3b\xbf\x62\xac\xb3\x25\x12\x08\xd9\xde\x34\x7d\x58\x2b\xb6\x84\x75\x5a\xb6\x04\x6f\x81\x4d\xdb\xe3\x50\x18\x49\x63\x5b\x20\x4b\x5a\x49\x06\x5c\x50\x7e\x7b\xef\x9d\x19\x8d\x46\xb2\xd9\xdd\x9c\x26\xe7\x04\x49\x33\xf7\xfd\x9e\xf1\xf6\xf7\xc8\x3c\x4e\x7d\x1a\x93\x87\x28\x09\xd3\x07\xfb\x9f\xcc\xbf\x48\x83\x3b\x56\x92\xbd\xfe\x4e\xbf\x4f\xce\x19\x8d\xcb\x68\xc9\xc8\x01\xb9\x1f\x38\x43\x67\x00\x2f\x8b\xb2\xcc\x8a\x51\xbf\x3f\x8f\xca\xc5\xca\x77\x82\x74\xd9\xbf\xcd\xa2\x38\x4e\x73\xda\x9f\xa7\x07\xb9\x44\x41\xf4\xf7\x14\x71\x3f\x88\x4d\xf2\x26\x64\xf7\x7f\xa9\x41\x11\xef\x10\xa8\xfd\x78\x72\x49\x8e\xd3\x6c\x9d\x47\xf3\x45\x49\x5e\x0f\x86\xdf\xed\x98\xb3\x55\x12\x94\x51\x9a\x98\x52\x2a\x12\xa6\xc1\x6a\xc9\x92\xd2\x22\x4f\x3b\x3b\x84\x44\x33\xb3\x27\xb6\x1c\x25\xb0\x05\xeb\x84\xe4\xac\x5c\xe5\x09\xa1\x31\xcb\x4b\xd3\xd0\xa4\x19\x91\x72\x11\x15\xc4\xcf\xd3\x87\x82\xe5\x40\x90\x15\x24\x49\x4b\x52\xac\xb2\x2c\xcd\x4b\xa2\xe8\x14\x86\xe5\x22\x8f\x7e\xbf\x46\x25\x59\x9e\x96\x69\x90\xc6\xe4\x9e\xe5\x05\x88\x05\xbb\xf7\x34\x17\xcb\xc4\x23\xc6\xfd\xd0\x90\x28\xd9\xca\x8f\xa3\x80\x2c\x59\xb9\x48\x43\x09\xa6\xc8\x78\x44\xe9\xb5\xca\x63\x54\x05\x25\xe6\x20\x25\x6c\x26\xec\x41\x99\x9b\x03\xb8\x42\xa3\xb2\x70\xb2\x55\xb1\x30\xf3\xb2\x5e\x11\x3a\xe6\x25\x7e\x56\xf8\xa7\x66\xe1\xd4\x22\xf1\x67\x6b\x27\x4d\xe2\x28\x41\x19\xca\x7c\xc5\x5c\x2e\x6c\xb1\x00\xc5\x83\x55\xa9\x83\x15\xeb\x24\xd0\x05\x4d\xfd\xdb\x0d\x41\x6b\x60\x53\x49\xc8\xd1\x38\xec\x76\x09\x05\xbb\x8c\x05\x11\x44\xda\x92\xe5\x73\x8c\xa7\x68\x9e\xa4\x39\x23\xaf\x40\xd6\x0c\xbc\x15\xb1\x82\x83\x91\x47\xf2\xe6\x80\xac\xa5\xf1\x04\xb0\x26\xd0\xa3\x4d\xd6\xb5\x44\xd1\x8c\x98\xbd\x47\xf2\xfc\x4c\xca\x75\xc6\xd2\x19\xa0\xf6\x3c\xf0\x07\x08\xc2\x82\xd2\x80\x0d\x0e\x46\x48\x6f\xad\x01\xad\x5b\x40\x96\x04\x91\x22\xaf\x5d\xa5\xeb\x9d\xab\x98\x3c\x92\x28\x29\x4a\x9a\x04\x88\x7f\x94\xe7\x74\x4d\x76\x77\x81\x50\x77\xb5\x26\xf6\xb0\x88\x62\x06\x68\x4e\xcc\x92\x79\xb9\x20\x87\x64\x2d\x5f\x6b\x08\x42\x1e\x9d\x2c\xcd\x6a\x13\xb2\xb8\x60\x72\x67\x96\xe6\xc4\xbc\x03\xd2\xe4\xb1\x01\x46\x21\xee\xa6\x83\x2b\x21\xfa\x2b\x03\xd9\xf7\x04\xd4\xda\x6a\xc0\x08\x09\x59\xcc\x4a\x46\x1e\xa7\x77\x57\x82\x72\x43\x4e\x49\x87\x9b\x60\x52\x6e\x5a\x13\x3f\xc0\xa4\xf0\xb7\xed\xbb\xc7\xc6\x75\xc2\xf1\x05\xa0\x4c\xaf\x44\xe4\xc8\x9a\x01\xca\x97\xab\x82\x04\x0b\x9a\x80\x93\xe0\x6f\x08\x69\x07\x00\xb5\xb3\x48\x9a\x08\x10\x93\xdd\xcb\xe4\x15\x1c\xba\x31\x99\xd0\xfb\x68\x4e\xcb\x34\x87\xa5\x53\x58\x52\xa2\x9b\xc8\x3b\x02\x88\x81\x0b\x8f\x37\x3c\x19\x84\x21\xe1\x7b\x7f\xbf\xa6\xc8\x2b\x42\x97\x2c\x98\x08\xc0\xa7\xd1\x95\x43\x57\x40\x9a\x95\xf9\xba\xb1\x94\xdc\xe1\xab\xb5\x13\xaa\x1d\xf1\xbf\xac\x2c\x34\x0c\xc7\x28\xf6\x69\x54\x94\x2c\x61\xb9\xf9\x8d\x20\xfc\x8d\x4d\x94\x62\x1c\xf3\x65\xf8\xd9\x4c\x22\x68\xf0\xdc\x80\x0b\x16\x43\xcc\x17\xd2\xb8\xdc\x3a\xdc\xbe\xc6\x92\x15\x05\x9d\x33\xc3\x36\x58\x9e\xa7\x39\x3c\x21\x39\x12\x78\x04\x71\x5a\x30\x83\xdb\x1f\x51\xe2\x14\xd3\x54\x72\x86\x0f\x8a\xf6\x76\xdb\x65\x2b\x88\x69\x51\x40\xa2\xe5\x2c\xcb\x59\xc1\x59\x50\x52\x44\xc9\x1c\x62\xf3\x81\xf9\x05\x2f\x77\xba\xbb\x5a\xd5\x47\xe5\x98\xd9\xc3\x4f\x69\x39\x78\xc5\x8a\xa7\x98\x18\xae\x82\xea\xff\x87\x37\x86\xb7\xa3\xbe\x53\xb2\xa2\xe4\x44\xda\x68\x20\xa7\xa3\x6a\xe9\x3e\x50\xe9\x1b\xf0\xc0\xd5\x45\x5a\x94\xf0\x0a\x60\x5d\x7a\x26\x10\xfc\xb9\xff\x73\xdf\xd9\xb7\x5e\x6d\x21\x5c\x2e\xa0\xa0\x13\xe3\x24\xb9\xa7\x71\x14\x92\x8f\xe7\xa7\x23\x62\xe8\x94\xb0\xea\x3b\x52\xea\x87\x02\xb7\xce\xd9\x7c\xfc\x98\x39\xaf\x86\x1a\x40\x90\x26\x09\x54\x83\x3a\x12\xf8\x1a\x14\x08\xf4\xc9\x53\xa5\xad\x15\x2b\x7f\x63\x4d\xe2\xb2\x10\xcb\x14\x85\x44\x76\x65\x1c\x9d\xb7\xaa\x32\x56\x1f\x44\xe5\x88\x58\x2f\x47\x4d\x51\xbb\x63\x6b\x88\x91\xa6\xd4\x72\x03\xd0\x7c\xce\x7b\x5e\x1d\xf1\xc4\x83\xdc\x1f\x36\x20\x04\x31\x80\x22\x20\xbb\x6a\x09\x3e\x50\xd3\x90\xcd\xe8\x2a\x2e\x8d\x7a\xa3\x52\xe6\x92\x8a\x4d\x01\x10\x8b\x00\xbc\xbb\xfa\x1e\x2a\x58\xef\x0d\x36\x76\x82\x3c\xf2\x55\xd9\xaf\x6c\xfe\x90\xea\x6b\xda\x34\x22\x72\x44\x95\x7d\x5a\xf3\x51\x9b\xed\x04\xb4\xeb\x0a\x94\xaf\xb7\xd2\x0b\x62\x46\xf3\x4b\x30\x69\xba\x2a\xcd\x06\xdf\xa9\x3b\x23\xb7\x1b\x5f\x7f\x28\x9a\x5c\x17\x5e\x02\xd4\x64\xa5\x0a\xae\x08\x31\xbe\x03\x25\x93\xae\x3b\xd0\x7c\x0d\xe4\x1d\x0e\xda\x46\x78\x28\x64\xa3\x56\xe3\x82\x59\x07\x98\x4d\x8c\xbc\x3c\x30\xf6\xb9\xb3\x15\x17\xcc\xd5\x6b\x3e\x79\x78\x9c\x42\xbd\x2e\x52\xde\x81\x12\x37\xa6\xc1\xa2\x19\x78\x98\xee\x5f\x8c\x17\x23\x4d\x8c\x7d\xd6\x38\xf8\x5a\xca\x31\x65\xe8\x22\xfe\x05\xaf\x8e\x0f\x95\xc0\xe4\x5f\x8a\x75\x65\xb5\x44\xcf\x20\xf1\x1d\x6c\xdf\x05\x2b\x4f\x92\x92\xe5\x90\x31\x66\xb3\xc3\x09\x70\x7c\x9b\x7c\x3b\x20\x7b\xa8\xfa\xa0\xed\x97\x30\x2a\x7e\x95\xb3\x55\x32\xbc\xe4\x84\x3a\x82\xc4\xaa\x4e\xf4\xa9\xeb\x24\xdd\x9f\xa2\x43\xfd\x26\x16\x56\xd6\x14\x66\x46\x93\x26\xab\x38\xde\x34\x61\x13\x57\x10\x72\x34\x5c\x5f\x40\x39\x67\xbc\x1b\xab\x48\x70\x8e\x4f\x27\x17\xe3\x77\x9d\x48\x7a\x40\xad\xa1\x74\x9b\xd6\x96\x40\xd2\x58\xf1\xd0\xde\xe2\x97\xb2\x6d\x2b\x28\xe3\xa1\x66\xa8\x90\x96\xb4\x55\x34\xb6\x08\xe9\xb5\x84\x9c\x7c\x18\x9f\x75\x4d\xa9\x24\x45\xea\x82\x66\x8b\x29\x0a\xf2\xb2\xcb\x39\x92\x81\x30\x46\x47\xd6\xba\x62\x7c\x01\xf7\xfd\xc5\xe4\xcc\x29\xca\x1c\x28\x44\xb3\xb5\xa9\xaa\x8d\xd5\x26\x97\x26\xb2\x39\x6a\xe4\x5a\x73\x85\x88\x05\x20\x04\xa6\xe5\x1b\x0e\xaa\xd2\x78\x90\x98\x7c\x0f\x27\x28\x21\x6d\x27\x92\x34\x22\xab\x0c\x50\x99\x8a\x25\x8c\xe7\x26\x68\xe4\x26\x70\xe1\x92\x67\x34\x07\xf7\x02\xe9\x26\xf3\x08\xf4\x63\x88\x39\x68\xe1\x7a\xb0\x49\x63\x43\x0e\x15\x69\xcc\x9c\x07\x9a\x27\x08\x62\x93\x16\xee\x4e\x33\x07\x76\xa7\x1f\xc9\x78\xfb\x04\x24\x05\x07\x68\x09\x06\xf3\x8d\xdb\xda\x13\xbd\x61\xe5\xfc\x5d\x6f\x18\xb8\x11\x16\xa5\x4c\x9e\xa6\x37\xb4\x21\x8a\x3c\xe0\xa8\xef\x34\x83\x8a\xec\xc4\x1d\x98\xad\x7b\x40\x43\x9f\x43\x41\xc9\x32\x4a\xb0\xd8\xeb\xd0\x40\x80\xc5\x10\x5d\x1a\xe0\x6d\x91\x26\x19\x5a\xcb\xa1\x59\x16\xaf\x4d\xa0\x63\x23\x3b\xab\x61\xa3\x0d\xc7\xf8\x9f\x98\x5b\x35\x38\x9d\x83\x9c\xf1\x61\xd7\x79\xc5\x09\x0a\x7f\xd7\x01\x63\xb4\x66\x65\x05\x64\x5a\xee\x4b\x44\xd2\x44\x98\xf3\x4b\x74\x6a\x38\x53\x17\x68\xa3\xa5\xae\x9c\x9f\xc4\x11\xb2\xdb\x98\xe1\x78\xb4\x0a\x02\x88\xef\xd9\x0a\x4e\x48\xc5\x9c\xe0\xc4\x06\x03\x9b\xa8\xa5\x41\xba\xc2\xca\xa0\x67\xce\x46\x87\x52\x59\x82\x03\xe3\xcb\x19\xa7\x4f\x2b\x7a\x37\xae\x6b\x87\x9a\x54\x49\xeb\xd3\x44\x58\xeb\xab\x06\x82\x34\xe1\x05\xef\xeb\x44\x68\xf5\x88\x2f\xc9\xc0\x81\xdb\x42\x08\x33\xec\x79\xe4\x75\x97\x48\x33\xf4\x6b\x29\xa2\xcf\x0c\xa2\x15\xb6\xa6\x09\x29\x59\xab\x19\x6a\x33\x42\xdb\x69\x4a\x5d\x3e\xa9\xeb\x45\x49\x4f\x7b\x38\xd0\xd6\x09\xcf\xe1\x4c\x43\x8d\xde\x44\x22\xfe\xae\x30\x6c\x7c\xd7\x8f\x21\x62\x94\x17\xd7\x09\x11\x0f\x7f\x39\xeb\x6b\xb7\x09\xf5\xab\xbb\x53\x6d\x5c\x94\xd8\x64\x95\xc0\x10\x08\xa7\x8f\x10\xcb\xe8\x4e\x7f\xaf\xb7\xb3\xb7\xed\xe6\x06\x7a\x44\x2e\xc3\xeb\xe0\x3d\x0d\xee\xfa\x58\xd3\x0e\x3e\x60\x46\x02\x02\x66\xe7\x01\x4f\xcf\x83\x70\x95\xc5\xec\xd1\x81\x99\x58\xde\x82\x8c\xc8\xc0\xf9\xce\x79\x0d\x50\x66\x60\xe1\xc5\xcd\xb7\xe4\x7d\x0a\xad\x36\x5a\x42\xbb\x29\x30\x5c\xf7\xf8\xe5\x0e\x68\xc0\x12\x50\x61\xaf\xbf\xc3\x7b\xf5\x35\x7b\x84\xf3\x51\x58\x78\xdc\xb2\xea\xf3\xf9\x59\x19\x90\xda\xbe\xf5\xa4\x4e\x25\x01\x8c\x03\xb5\x77\xa0\x52\xae\x02\xf0\xab\x47\xab\xba\x3e\x86\x78\xb6\xf5\x2d\xdf\x59\xd0\x62\xf2\x90\x7c\x10\xb7\x09\x50\x48\xac\xdd\x5d\x93\x4e\xc3\x2b\xcf\x87\x3f\x96\x1b\x34\x63\xb8\xe7\x37\xef\x36\xd5\xd6\x71\xb2\x0b\x2a\x7b\x92\x47\xf3\x28\xa1\xf1\x18\xfd\xe3\xf1\xbf\xb6\xaa\x53\x6e\xaf\x91\x53\x93\xd2\x07\xa9\x03\xeb\xa9\x78\x88\xb0\xf2\xcb\x0a\x02\x00\x01\x85\x63\x9b\xf2\x85\x31\xe2\xdf\x7e\x9a\xe2\xcc\x23\xbf\x44\xeb\x93\x1f\xc9\x6a\xe9\xb3\xdc\x18\xd5\x17\x59\x50\x76\x02\x97\xef\xc8\x0b\x8b\x11\x04\x38\x0e\x0e\xb0\x41\x2d\x09\x25\xbf\x03\x17\xf6\xe6\x20\x96\xf5\x84\xa5\x79\x0e\x7e\x79\x7e\xa6\xb2\x5d\xc0\xac\x12\xd4\x97\x10\x02\xad\x37\x74\x95\x11\xbd\x81\xcd\xbc\x1a\xd4\x65\x87\xa1\x1b\x42\x73\x41\x2a\x3e\x37\xa2\x1d\xa0\x11\x1b\x44\xf9\x32\xa8\x10\x7b\xe6\x2d\x80\x95\x1d\x79\xb3\x9a\x00\x20\x2e\x40\x8e\x86\x75\xb4\x95\xa7\x1b\x7d\x35\x23\x57\x1e\x69\x46\xf5\x4e\x55\x69\x11\x82\x9e\x90\x64\x7d\x3b\x00\x65\xc2\x46\x99\xf0\x30\x70\xad\x27\x1f\x16\x82\x05\xcd\x8f\xd3\x90\x1d\x95\x20\xae\xcb\x6d\x64\xfa\x87\xde\xef\xff\xb4\xbb\xfb\xdd\x1f\x0f\x3d\x5f\x63\x1b\xec\xef\x57\x95\x52\x52\x71\x0a\x31\x36\xed\xb0\xe1\xc6\xec\x99\xbd\xf0\x7a\x43\x7b\x09\x4c\x13\x08\x2c\xc9\x34\x39\x5c\x02\x53\x88\xb4\xe9\xf2\xca\x5e\xee\xef\x2b\xad\x53\x0f\xce\x83\xb4\x5c\x38\x45\x16\x47\xa5\x69\xf4\x0d\xcb\xce\x3c\x6a\x7f\xf2\x86\x76\xee\xa5\x12\xdf\x2e\xbc\xfb\x14\xce\xb3\x03\xd7\xe5\xbe\x9c\x79\xe9\xf4\xd3\x95\x1d\xee\xee\x8a\x65\x70\x76\x01\xe1\xad\x3e\xb2\xe9\xec\xea\x6d\x01\xe8\x05\x66\x9b\x39\xb0\x3f\x59\xce\x6d\x1a\x25\x9c\xfe\xe8\x93\xe7\xe5\x07\x43\x80\x2f\x24\x73\xcb\x16\x98\x3d\x4e\x86\x27\x17\x3f\x3f\xe3\x15\x8c\xc9\xec\xe5\xc1\xd0\xa6\x36\xcc\x5f\xf6\xa7\xfd\x7d\x5b\x31\x99\xed\xee\x7e\x3a\xf4\x72\xeb\x69\xe1\xdd\x4d\x99\x93\x66\x57\x4e\x40\xe3\x18\x10\x32\xb0\x02\xcc\x8c\x3e\x54\xa4\xbb\x8a\xc7\x60\x26\x62\xd0\x38\x30\x10\xd1\x9a\x79\x99\x8a\x2d\xa8\xe1\xb8\x05\xba\xf4\x02\x73\x66\x59\xe2\x08\x8f\xa9\x17\x9b\x06\x9c\xcc\x45\x6b\xa0\x09\x54\xb0\x22\x9a\x43\xd2\x10\x1f\xc2\xff\x60\x38\x80\x44\x2f\xd9\x9c\xe5\x30\x91\xc4\x2b\x66\x93\x25\xbd\x83\xbc\x81\x02\xcd\x38\x76\xce\x66\x2c\x67\x49\x00\x08\x1c\x80\x6f\x50\x7e\x59\xc7\x62\x86\x45\x11\x6a\x28\x1c\xa3\x71\xf9\xbf\x2c\x4f\x0f\x90\x2c\x56\x8f\x90\x3d\x1a\xb6\x01\x83\xf1\xf9\xd1\xe5\xc9\xe4\xec\xfa\xc3\xd1\xe5\xdf\xae\x4f\x4e\x4f\xc7\x7f\x3d\x3a\xbd\x3e\x3a\x3f\x3f\xfa\xf7\xf5\xc9\xd9\xbb\xf1\xbf\x0c\x6e\x18\x61\x41\x1b\xfa\x10\x28\x85\xa3\x1f\x0c\xed\xe6\xcc\x1e\x0e\x2c\xd4\x5c\x18\x48\xa8\x67\xd0\x30\x44\xf5\xd1\x54\xbb\xbb\xb3\xc3\xda\x04\x6d\x8d\x2f\x41\x1c\x7e\x35\x3a\x8b\x6a\x69\xc8\x8f\x1f\x2f\x2e\xc9\xd9\xe4\x92\xf8\x8c\xcc\xc1\xa8\x50\x4c\x41\x6c\x9a\x08\x5d\x79\x85\x20\x50\x5e\xa4\x5a\x05\x56\x40\xa5\x6c\x4b\x95\x9f\x8e\x4e\x3f\x8e\xaf\x27\x1f\x2f\xaf\x27\x3f\x5c\x7f\x3f\xf9\x78\xf6\xee\xa2\xab\xc5\xc2\xbb\xfd\x8c\x33\x2b\x74\x17\xf6\x54\x70\xfe\xc1\xb0\x07\x19\xce\x25\x9c\x80\x6b\x7f\x31\xb0\xc2\xce\x60\x29\x67\x59\x4c\x21\xec\xfa\xbf\x0c\xfb\x73\x1b\x43\x4e\x5b\x1a\xe0\x12\xc0\x42\x30\xc9\xe0\x89\x3e\xc3\x2f\xe3\xa1\x5c\xa7\x1e\x59\x34\xa9\xc7\x4c\xc8\x6c\x3b\x04\x91\x79\x60\xc9\x6a\xd8\xf3\x64\xa9\xf5\x9f\x9f\x65\x15\x84\xb7\xb9\xe9\x77\xe2\x6a\x02\x4d\x81\xdf\x91\x91\x48\xdc\xfb\x83\x31\x25\x09\xdd\x5e\x60\xf3\xeb\xa3\xb3\xeb\xc9\xf7\xef\xc7\xc7\x97\x06\xf0\xc3\x64\xc7\x6a\xd6\x8b\xa6\x3e\x0a\xfd\x12\xd5\x9b\x34\xbb\x21\xf2\x26\x7b\x5d\xf3\x80\xd1\x00\xdd\x94\xd6\x50\x05\x91\x6d\x00\x1d\x76\xfe\xc3\xf1\xc1\x1f\xfe\x3c\x78\xdd\xe2\x3f\xf9\x00\xa1\x06\x4e\x3b\x79\xa7\x33\xaf\x3b\x44\xa3\xac\xc8\xe2\x97\x64\xc1\xcd\x4d\x69\x28\x91\x64\x36\x63\x7d\x93\xa5\x69\x2c\xd3\x7b\x86\xd1\x8b\x6a\x3f\x3f\x1b\x41\x9a\xad\xeb\x4f\xf0\xfb\x16\x91\x66\x79\xba\x7c\x51\x24\xdc\xdc\x14\x49\xde\x4b\x12\x13\xa7\xf0\x28\xa0\x7e\xcc\xd0\x34\x37\xc8\xfb\x06\x5c\x14\x92\x1b\xe4\x7b\xa3\x99\xd0\x6a\x89\xff\xc3\xf9\xe4\xc7\xeb\xf3\xf1\x3f\x3e\x9e\x9c\x8f\x3b\xf2\xcb\xe4\x93\xe2\xcb\x78\xd4\x56\xf0\x2a\x51\x53\x48\x55\x39\xdf\xe1\xd5\xe3\x45\x4d\xf8\xee\xd7\xab\x02\x62\xdc\xd8\xe4\x46\xf2\x97\x4a\x21\xef\x97\x95\x12\x49\xbb\x4d\xab\x10\x1b\xa5\xd4\x8c\xcb\xfd\x24\xda\xaf\xdf\x6d\x29\x75\x1b\x59\x40\xf1\xd9\x58\x45\x4a\x33\x28\xfd\x8b\x7d\xe8\x09\xfc\xa5\xad\xec\x31\x4d\xb8\x46\x2c\x87\xa6\xb5\xc4\x4c\xe1\x5a\x34\xf2\x12\x5a\xf2\x7a\x13\xb2\x22\xca\x21\x9a\x91\xf9\x66\x54\x1d\x1f\x9d\xf1\x74\x7a\xa7\x54\x50\xc5\x64\x8b\x3b\x72\xd6\x09\xb8\xeb\x39\x6b\xfc\x83\x29\x2f\x94\x04\x71\xd9\x67\xc5\x45\xc1\x5a\x92\x52\x2e\x1f\xd6\xcf\xb2\xf9\xd9\x8f\x3d\x46\x45\xb9\x29\xf3\xc7\xb3\xf3\xf1\xc5\xe4\xf4\xa7\xa3\xef\x4f\xc7\x9b\x52\x7f\x2e\x25\xb8\x27\x6e\xbd\xa7\x34\x1b\x09\xd1\x6d\xe4\x3a\x12\x69\x61\xf3\xa0\x19\x89\x18\xab\xec\x3b\x98\x45\x64\xbf\x65\xe6\xf4\xf6\x4a\x7a\xf7\x0e\xd2\xea\x73\xf2\x00\xab\x3b\x27\xa1\xcb\x5f\xa3\x3f\x72\xff\x5a\x0b\xf0\x64\xda\x6a\x81\xa6\x0a\xcf\xc4\x70\x0e\x07\x28\x39\x62\xd2\x4e\xa1\xe5\x27\x07\x38\x58\x7d\x5a\x61\x2b\x26\xcb\x55\x51\x62\x17\x83\x20\xaa\xbb\xd3\x05\x04\xf6\xf8\xec\x78\x5c\x17\x5b\xde\x61\x0d\x6e\x01\x18\xe3\x3d\xed\x4e\xa5\x73\x31\x04\x35\xdd\x0e\x45\xd7\xc0\x91\x05\x44\xa3\x76\x6f\x60\xf1\x89\x42\x5d\x97\xc0\xf0\xe7\x06\x6f\xd4\xf0\x07\x73\x9c\xd5\x99\x6f\xe8\x34\x80\x29\xd3\xaa\xe4\x1d\x0d\x8f\x2d\xa6\xff\x94\x17\xd7\x63\x35\x73\x85\x6a\xac\xc2\xd6\xde\xa3\xe2\x8a\x42\xb8\x7a\x0e\xb9\xa5\xdd\x57\x4a\x8c\x09\x6f\x29\x0e\x9c\xf6\x8b\xb7\xda\xfb\x48\x3f\x32\xf0\x21\xd5\x9b\x5e\xa9\x91\x30\xc0\x42\x41\x2d\xda\x3d\xc1\x04\x50\x96\x7c\xf1\xdb\x2f\x8c\xab\x92\x83\x5f\x55\x26\x8e\xda\x4f\x90\x92\xa3\xf6\x89\xa9\x3e\x32\x4c\xfd\x2b\xaf\xd6\x19\xe6\x24\x98\x5f\x6d\x91\x5d\xdb\xe1\xe5\x4f\x86\x88\x26\x61\x79\x6e\x7e\x3d\xf1\x0d\xd2\x78\x10\xe2\xc3\xf1\x46\x3a\x70\x4c\x8c\xc9\xaa\xd6\x27\x34\x03\x7b\xca\xae\xc0\xb3\xf8\xc2\xe1\x65\x29\xe8\x62\xb4\x60\xb0\x06\x6a\x00\x7c\x98\x11\x49\xc6\x84\x64\x08\x8e\xc2\x61\x92\xfe\x96\xc2\x7d\x35\x63\xac\xf1\x3a\xe3\x40\xd9\xd0\x17\x21\xd8\x58\xd1\xaa\x6c\x14\xa3\x63\xf1\x66\xdf\x43\xab\x57\x95\x7d\xfb\x39\xaf\xf3\x3a\x1f\xe0\x94\x34\xd0\x49\x7f\xd1\xfd\x1a\xe2\xd0\xfa\x3f\x02\x20\x72\xf0\x21\xec\x1d\x39\xf8\x10\x26\x88\xf8\x8f\x76\x42\xc1\xc8\xc1\x07\x16\xc0\x8e\x22\xd6\xd3\x9d\x23\x84\xd4\xf2\x1b\x86\x42\x75\xa8\x13\x23\xae\xd2\xaa\x79\xed\x26\x8d\x2f\x8e\xfd\x2d\x21\xe1\xcb\x6a\x4e\xac\x9b\xd6\xd0\x0e\x8f\x2f\xa4\x22\x52\x8d\xb6\x48\x08\x86\x69\x11\xee\x1a\xae\x49\x32\x30\xe2\x4b\xd1\x8d\x6f\x22\xba\xe9\x17\x83\xac\x51\xaa\x8e\xb3\xcf\x1a\x7f\x8b\x24\x9d\xa2\x4a\x2d\x68\x2b\xdb\x6e\xe0\x5f\x88\xcc\x76\x5c\x56\x95\x3b\xf7\xf8\x3f\x7d\x70\xa2\x82\x3f\xdf\xb6\xbe\xb6\x09\x40\x79\x49\x83\x5e\x27\xaf\x3a\xbc\x7a\x84\xac\x8b\x76\x65\xcb\x4a\xeb\x85\x2e\xff\xad\xdb\x7b\xe1\xc6\x45\x1e\x08\xec\x99\xf5\x44\xf5\xbe\x60\x89\x04\x90\x3f\x17\x78\xbe\xf8\xc4\xce\xe9\x05\xe2\x9d\x1f\x62\xbc\x50\x7c\xa8\x6e\xe9\x31\xb1\x50\xe6\x8c\x79\xb3\xfa\x0c\xa2\x6e\xa8\x80\x1f\xb5\x6c\xbf\x32\x5b\xf7\x43\x96\x4b\x9d\xf7\x45\x9a\xf0\xc6\x27\x6e\x8c\x62\x50\xa0\x79\x53\x9d\xc7\x63\xcd\x17\xd2\xaf\x4c\x75\xa9\xf4\xfc\xdc\xbc\x7b\x4f\x15\x34\x3a\xed\xce\x48\xcd\xd8\xec\x11\xff\xa9\x12\x1e\xfc\xe5\x9b\x34\x53\xe7\x0e\xdd\xae\x77\x15\xaf\x06\xa0\x5e\xea\xc2\x80\x74\x1b\x40\x69\xae\xa0\x3a\x0a\x36\xa0\xed\x0d\x05\xdf\x05\x93\x96\xfa\x5f\x00\x00\x00\xff\xff\x3b\x9d\x71\xe9\x6f\x26\x00\x00")

func realtimeJsBytes() ([]byte, error) {
	return bindataRead(
		_realtimeJs,
		"realtime.js",
	)
}

func realtimeJs() (*asset, error) {
	bytes, err := realtimeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "realtime.js", size: 9839, mode: os.FileMode(420), modTime: time.Unix(1433249706, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"realtime.js": realtimeJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"realtime.js": &bintree{realtimeJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

