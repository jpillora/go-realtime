// Code generated by go-bindata.
// sources:
// realtime.js
// DO NOT EDIT!

package realtime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _realtimeJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x39\x7b\x77\xdb\xb6\xf5\xff\xfb\x53\x40\x3c\xf9\xf9\x90\x31\x44\x49\xe9\xaf\x7b\x88\xa1\x33\xd7\x51\x37\x67\xae\x95\xd9\x4e\xb7\x1d\xd5\xb3\x41\x12\x92\x68\x51\x24\x43\x52\xb6\x34\x99\xfd\xec\xbb\x17\x00\x9f\x92\x92\xec\xac\x3d\xa7\x11\x01\xdc\xf7\x1b\x70\xef\x35\x99\x05\x91\xc3\x02\xf2\xec\x87\x5e\xf4\x4c\xff\xce\x9d\x9b\xc8\x5d\xf0\x8c\xbc\xee\x1d\xf5\x7a\xe4\x9a\xb3\x20\xf3\x97\x9c\x74\xc9\x53\xdf\x1c\x98\x7d\xf8\x98\x67\x59\x9c\x0e\x7b\xbd\x99\x9f\xcd\x57\x8e\xe9\x46\xcb\xde\x63\xec\x07\x41\x94\xb0\xde\x2c\xea\x26\x0a\x05\xd1\x3f\x30\xc4\xfd\x28\x0f\xc9\x5b\x8f\x3f\xfd\xa9\x00\x45\xbc\x53\xa0\xf6\xd3\xc5\x2d\x39\x8f\xe2\x4d\xe2\xcf\xe6\x19\x79\xd3\x1f\x7c\x7f\xa4\x4f\x57\xa1\x9b\xf9\x51\xa8\x4b\xa9\x0c\xb2\x3d\x22\xa4\xd7\x2b\x28\x93\x38\x89\xb2\xc8\x8d\x02\xf2\xc4\x93\x14\xe0\xe0\xf4\x89\x25\x72\x9b\xd8\x44\x7b\x1a\x68\x96\xc0\x48\x63\xee\xfa\xa0\xdd\x92\x27\x33\xd4\xc1\x9f\x85\x51\xc2\xc9\x2b\x80\x8c\x79\x92\xf9\x3c\x15\x60\x64\x4d\xde\x76\xc9\x46\x91\x91\xc0\x36\x29\xa5\x58\x53\xb2\x91\x32\x10\xe2\x4f\x89\xde\x59\x93\x97\x17\x92\x6d\x62\x1e\x4d\x01\xb5\x63\x03\xcb\xc8\x79\xe4\x6e\xa6\xc1\x81\x00\x23\xa4\xb3\xa9\x01\x6d\x1a\x40\x86\x02\x49\x78\xb6\x4a\x42\xb2\xb1\xc4\x1a\x59\x2f\xac\x92\xc9\x9a\xf8\x61\x9a\xb1\xd0\x45\xfc\xb3\x24\x61\x1b\x72\x7c\x0c\x84\xda\xbb\x05\xb1\xe7\xb9\x1f\x70\x40\x33\x03\x1e\xce\xb2\x39\x39\x25\x1b\xf5\x59\x40\x10\xb2\x36\xe3\x28\xd6\x0d\xc9\x84\x07\x29\x57\x27\xd3\x28\x21\xfa\x02\x48\x93\x75\x05\x8c\x42\x2c\x26\xfd\x3b\x29\xfa\x2b\x0d\xd9\x77\x24\xd4\xc6\xa8\xc0\x08\xf1\x78\xc0\x33\x4e\xd6\x93\xc5\x9d\xa4\x5c\x91\x2b\xa5\xc3\x43\x30\xa9\x30\xad\x8e\x0b\x30\x29\xfc\xab\x44\x51\x86\x58\xe3\x2a\xb7\x8e\x94\x1f\xf8\x13\x0f\xb3\x14\xb0\x26\xda\x92\xa7\x29\x9b\x71\x8d\x6a\x3c\x49\xa2\x04\x7e\xc1\x7f\x21\xfc\xb8\x41\x94\x72\x4d\xf0\x45\x94\x20\x72\x01\x5e\x46\x8d\x09\x0b\x86\xfe\xb3\x9a\xc1\xe3\x06\x2c\x4d\x21\x16\x12\x1e\x27\x3c\x15\x2c\x18\x49\xfd\x70\x06\xe6\x7b\xe6\x4e\x2a\xc2\x1f\x50\x0a\xf7\x97\x39\xa0\xaf\x92\xa0\x0a\x03\xbd\x83\x4b\xa5\x1e\x7c\x62\xdc\x95\x4c\x34\xab\x84\xea\xfd\x4b\xe4\xcb\xbb\x61\xcf\xcc\x78\x9a\x09\x22\x4d\x34\x90\xd3\x2c\x23\xfa\x04\xa8\xf4\x34\xf8\xc1\xdd\x79\x94\x66\xf0\x09\x60\x6d\x7a\x3a\x10\xfc\xa5\xf7\x4b\xcf\x3c\x31\x5e\xed\x21\x9c\xcd\x93\xe8\x99\x68\x17\xe1\x13\x0b\x7c\x8f\x7c\xba\xbe\x1c\x12\xad\x4e\x29\x9b\xfb\xa9\xa9\xa4\x7e\x4e\xf1\xe8\x9a\xcf\x46\xeb\xd8\x7c\x35\xa8\x01\xb8\x51\x18\x42\xc0\x16\x11\x23\xf6\x20\x86\xd1\x27\xdb\xbc\xb6\x97\xae\x9c\x9d\x3d\x85\xcb\x3d\xcc\x24\x06\xb1\x26\x9c\x0b\xff\x17\xe6\x94\x3a\x63\x82\x20\xaa\x40\x4c\x37\xa1\x3b\xac\xf2\x6e\xc1\x37\x94\x00\xbf\xc2\xe8\xc2\x00\x2c\x99\xad\x96\xe8\xb5\x22\xd0\x6d\x08\xcf\x41\x05\x42\x10\x03\x28\x02\xb2\x55\x6e\xc1\x02\x35\xf5\xf8\x94\xad\x82\x4c\x2b\x0e\xf2\xd2\x5c\x4a\xb1\x09\x00\x62\x9c\xc2\xb7\x55\x3f\x43\x05\x8b\xb3\xfe\xce\x89\x9b\xf8\x0e\x2f\x8c\x94\x53\xf1\xa3\xd4\xaf\x69\xd3\xd0\x42\xe0\x3e\xa7\x55\x1a\x89\x0d\xcf\x4f\x5b\x26\x97\x3e\x97\x87\x3c\xa8\xb2\xbd\x40\xc0\x3d\x90\x69\xd0\x6f\x4a\xf5\x8c\xee\x08\xf9\x33\x29\xeb\xb9\x5e\x78\x9c\x12\x2d\xc9\xba\xda\x89\xb0\x7e\xc9\x05\x93\xe7\x1e\x41\x00\x0f\x7f\x8a\x7d\x99\x83\x26\x64\xf4\x88\xb9\xf3\xaa\x30\xf3\xba\xc1\xd1\x81\x5a\x14\x6a\x27\xbc\xb2\xf8\xbd\x92\x63\xc2\xd1\x66\x62\x05\x9f\xa6\x03\xa9\xa9\x8b\x55\xc9\x3a\x37\x1a\xa2\xc7\x90\x89\x66\x06\x38\x29\xcf\x2e\xc2\x8c\x27\x10\xc2\x7a\x75\x22\x08\x08\x7c\x4a\xbe\xeb\x93\xd7\xa8\x7a\xbf\x69\xfa\xca\x8a\x87\xac\xdf\xd9\x31\xbf\xac\x40\xbf\x89\x35\x4a\xcd\xa5\x49\x50\xfd\x70\x15\x04\xbb\xea\x56\x61\x60\x42\xdd\xf0\x36\x37\x19\x83\x32\x8a\xd5\xb6\xf4\x9a\x79\x7e\x39\xbe\x19\xbd\x6f\x79\x1d\x10\x44\xdd\xd3\x8d\x3d\x4e\xaf\xb1\x72\x03\xce\x92\x3d\x36\xcc\x9a\xf6\x82\x1a\xe8\xd5\x2c\xe5\xb1\x8c\xed\x8b\xd5\xba\x90\x76\x43\xc8\xf1\xc7\xd1\x55\xdb\x94\xa5\xa4\x48\x5d\xd2\x6c\x30\x45\x41\xf6\xba\x47\x66\x15\x22\x69\x08\xa3\xb5\x64\x2d\xd2\xed\x2b\xb8\x1f\x6e\xc6\x57\x66\x9a\x25\x40\xc1\x9f\x6e\xf4\x32\x55\x8d\x26\xb9\x28\x54\x9d\xa5\x46\x4e\x38\xb9\xa2\x89\xb1\x00\x84\xc0\xb4\xe2\xc0\x44\x55\x2a\x0f\x12\x5d\x9c\x61\x87\x94\xd2\xb6\x22\xa9\x46\x64\x15\x03\x2a\x2f\x63\x29\x4b\x36\xb5\xa0\x51\x87\xc0\x45\x48\x1e\xb3\x04\xdc\x0b\xa4\xab\x2c\x21\xd0\xcc\x20\xe6\xa0\xff\xd5\x83\x4d\x19\x1b\xe2\x3d\x8d\x02\x6e\x3e\xb3\x24\x44\x10\x4a\x1a\xb8\x47\x55\x9f\xd7\x51\x14\x5f\x94\x31\xf8\x79\x5b\x30\x56\xc5\x14\xf6\x4e\x4e\xea\xf4\x85\xe0\x00\xad\xc0\x26\xfe\x9d\xd5\x38\x93\x85\x75\x65\xfe\xb5\x5e\x6d\xf1\xc0\x4b\x33\x95\x3c\x55\x61\x6d\x42\xa4\x89\x2b\x50\xdf\xd7\x0c\x2a\xb3\x13\x4f\x60\x76\xea\x00\x8d\xfa\x9c\x01\x4a\x66\x7e\xb8\xe2\xd6\x51\x1d\x1a\x08\xf0\x00\xa2\xab\x06\xf8\x98\x46\x61\x8c\xd6\x32\x59\x1c\x07\x1b\x1d\xe8\x50\x64\x67\x54\x6c\x6a\xc3\x0f\xfe\x27\xe7\x92\x1a\x5c\x9d\x83\x9a\xe1\xe0\xd4\x7c\x25\x08\x4a\x7f\x17\x01\xa3\x35\x66\xa1\x12\x48\x37\xac\x43\x44\xa2\x50\x9a\xf3\x6b\x74\x0a\x38\xbd\x2e\xd0\x4e\x3f\x5a\x99\x3f\xcb\x29\xb8\xd9\xd5\xca\x08\xc7\x49\xe9\x70\xb6\xd4\xdb\x74\x96\xac\x78\xa3\xa2\x1c\x6a\x2f\x87\x9a\x5e\x14\x8a\xba\xf4\x6d\xdc\xca\xa1\xa0\xc5\xee\xb5\x4d\xde\x14\xdb\xd0\x03\x6e\x61\x54\x88\x56\xaa\x7f\x29\xfc\x46\x17\xa8\x35\xc7\x96\x30\x62\x56\xac\x67\x76\x3d\x77\x60\xea\x2f\xb2\x46\xc0\xe9\x5a\x39\xfc\x11\x85\xf8\x7f\xa9\x46\xf1\xbb\xa0\x2b\xa7\x53\x44\x8d\x57\x4e\xe0\xbb\xbe\x88\x21\x35\x6d\x96\xf3\x65\xed\xe2\x50\x1b\x18\x55\xa2\x62\x4f\x6e\xcc\x93\x6a\xe4\xcd\xd5\x55\x87\x92\x55\x08\x53\x8a\x1f\x72\x0f\x4b\xd5\x51\xef\x75\xe7\xe8\xf5\xbe\x1b\x17\xd4\xe1\xc4\x8d\x56\x58\xdc\xbb\x1f\x98\xbb\xe8\x61\xdd\xe8\x7e\xc4\xa8\x07\x04\xcc\x80\xae\x48\x81\xae\xb7\x8a\x03\xbe\x36\x61\x68\x53\x97\xa5\x21\xe9\x9b\xdf\x9b\x6f\x00\x4a\x77\x0d\xbc\x70\x7d\x47\x3e\x44\xd0\xce\xfc\x25\x94\xf4\x14\xe8\xc1\x09\x5e\xca\x40\x41\x1e\x82\x86\x70\x11\x14\xfd\xf0\x9e\xaf\x33\x28\xad\xa9\x2d\x0c\x5e\x2e\x5f\x5e\x4a\x75\x19\x75\x8c\x6d\x39\x36\xbb\xba\xb1\x2d\x9c\x06\xd5\x68\xe5\x66\x51\x62\xb3\xbc\xa8\x41\x1e\xde\x0f\x1c\xc3\x31\xe7\x2c\x1d\x3f\x87\x1f\xe5\x8d\x0c\x92\xd5\x38\x3e\xd6\xd9\xc4\xbb\xb3\x1d\xf8\xc7\xb0\xdc\x6a\x4e\xb4\x9d\xea\x9b\xb2\xda\x3e\x5a\xd5\xcd\xe9\x18\xee\x90\x7e\xc8\x82\x11\xba\xcf\x16\xff\xd2\xb2\x16\x58\x9d\x4a\xce\x9a\x94\x0e\x48\xed\x1a\xdb\xf4\xd9\xc7\xea\xaa\xb2\x14\x00\x5c\x06\xf7\x8a\xd2\x17\xda\x50\xac\x9d\x08\xc2\x85\x85\x6a\x25\xdb\x8b\x5a\x84\xab\xa5\xc3\x13\x6d\xa8\xfc\xcc\x20\xb5\x5d\x4b\x9c\xa8\x4b\xdf\x10\x8a\x00\x36\x67\x38\x60\x46\x11\x0d\x72\xed\x5a\x70\x36\x03\xb1\x8c\x2d\x96\xbf\x19\xf8\xe5\xe5\x85\xa9\x92\x0c\xf3\x80\x5b\x5c\xe4\x24\x5a\x67\x60\x95\x46\xb4\xfb\x94\xdb\x05\xa8\xc5\x4f\x3d\xcb\x83\x02\x8e\x54\x1c\x61\x44\xea\xa2\x11\x2b\x44\xf5\xd1\xcf\x11\x7b\x6a\xcf\x81\x15\xf5\xed\x69\x41\x00\x10\xe7\x20\x47\xc5\xda\xdf\xcb\xd3\xf2\xbf\x99\x91\xa5\x66\xee\x61\x71\x92\xe7\xb5\x08\x41\x4f\x28\xb2\x0e\x75\x41\x19\xaf\x52\xc6\x3b\x75\x2d\x63\xeb\xc0\x86\x3b\x67\xc9\x79\xe4\xf1\xb3\x0c\xc4\xb5\x84\x8d\x74\xe7\xd4\xfe\xff\x3f\x1c\x1f\x7f\xff\xfb\x53\xdb\xa9\xb1\x75\x4f\x4e\xf2\xbc\x54\xb2\xe4\xe4\x61\x6c\x52\xaf\xe2\xc6\xe9\x94\xce\xed\xce\x80\x2e\x81\x69\x08\x81\xa5\x98\x86\xa7\x4b\x60\x0a\x91\x36\x59\xde\xd1\xe5\xc9\x49\xa9\x75\x64\xc3\x85\x85\x65\x73\x33\x8d\x03\x3f\xd3\xb5\x9e\x66\xd0\xd8\x66\xf4\xb3\x3d\xa0\x89\x1d\x29\x7c\x9a\xda\x4f\x11\x5c\xb8\xfa\x96\x25\x7c\x39\xb5\xa3\xc9\xe7\x3b\xea\x1d\x1f\xcb\x6d\x70\x76\x0a\xe1\x5d\x2e\xe2\xc9\xf4\xee\x5d\x0a\xe8\x29\x66\x9b\xde\xa7\x9f\x0d\xf3\x31\xf2\x43\x41\x7f\xf8\xd9\xb6\x93\xee\x00\xe0\x53\xc5\xdc\xa0\x12\xb3\x23\xc8\x88\xe4\x12\x17\x3c\x06\xa9\xa5\x73\xba\xec\x0e\x28\xa3\x30\xe3\xd0\xcf\x27\x27\xb4\x64\x32\x3d\x3e\xfe\x7c\x6a\x27\xc6\x76\x6e\x2f\x26\xdc\x8c\xe2\x3b\xd3\x65\x41\x00\x08\x31\x58\x01\xe6\x32\x07\x6a\xd7\x22\x17\x31\x18\xcb\x18\xd4\xba\x1a\x22\x1a\x53\x3b\x2e\x63\x0b\xaa\x35\x1e\x81\x2e\x1d\x57\x9f\x1a\x86\xbc\x63\x62\xea\x05\xba\x06\x57\x47\x59\xd7\x59\x08\x15\x2c\xf5\x67\x90\x34\xc4\x81\xf0\xef\x0e\xfa\x90\xe8\x19\x9f\xf1\x04\xba\x7e\xb0\xe2\x94\x2c\xd9\x02\xf2\x06\xea\x36\x17\xd8\x09\x9f\xf2\x84\x87\x2e\x20\x08\x00\x71\xc0\xc4\x83\x07\x0f\x38\x5e\xf5\xa0\xc4\xc2\x3d\x0f\xb7\xff\xcd\x93\xa8\x8b\x64\xb1\x7a\x78\x7c\xad\x51\x0d\x86\xcf\xeb\xb3\xdb\x8b\xf1\xd5\xfd\xc7\xb3\xdb\xbf\xdc\x5f\x5c\x5e\x8e\xfe\x7c\x76\x79\x7f\x76\x7d\x7d\xf6\xcf\xfb\x8b\xab\xf7\xa3\x7f\x68\xc2\x30\xd2\x82\x94\x1b\x16\x28\x85\xe3\x15\x0c\xc6\xfa\x94\x0e\xfa\x06\x6a\x2e\x0d\x24\xd5\xd3\x98\xe7\xa1\xfa\x68\xaa\xe3\xe3\xe9\x69\x61\x82\xa6\xc6\xb7\x20\x8e\x78\x5e\x9a\xfa\x85\x34\xe4\xa7\x4f\x37\xb7\xe4\x6a\x7c\x4b\x1c\x4e\x66\x60\x54\x28\xa6\x20\x36\x0b\xa5\xae\xa2\x42\x10\x28\x2f\x4a\xad\x14\x2b\x60\xa9\x6c\x43\x95\x9f\xcf\x2e\x3f\x8d\xee\xc7\x9f\x6e\xef\xc7\x3f\xde\xff\x30\xfe\x74\xf5\xfe\xa6\xad\xc5\xdc\x7e\xfc\x82\x33\x73\x74\x17\xce\x1d\xe0\xfc\xee\xa0\x03\x19\x2e\x24\x1c\x83\x6b\x7f\xd5\xb0\xc2\x4e\x61\x2b\xe1\x71\xc0\x20\xec\x7a\xbf\x0e\x7a\x33\x8a\x21\x57\xdb\xea\xe3\x16\xc0\x42\x30\xa9\xe0\xf1\xbf\xc0\x2f\x16\xa1\x5c\xa4\x1e\x99\x57\xa9\xc7\x75\xc8\x6c\xea\x81\xc8\x22\xb0\x54\x35\xec\xd8\xaa\xd4\x3a\x2f\x2f\xaa\x0a\xc2\xd7\x4c\x77\x5a\x71\x35\x86\xa6\x20\x1e\x71\x08\x5c\xc6\xc2\x28\xc3\xf8\x52\x24\xea\xf6\x02\x9b\xdf\x9f\x5d\xdd\x8f\x7f\xf8\x30\x3a\xbf\xd5\x80\x1f\x26\x3b\x56\xb3\x8e\x3f\x71\x50\xe8\x43\x54\x1f\xa2\xf8\x81\xa8\xd7\xc0\x4d\xc1\x03\x26\x07\x74\x53\x54\x40\xa5\x44\xb5\x01\x74\xd8\xf5\x8f\xe7\xdd\xdf\xfd\xb1\xff\xa6\xc1\x7f\xfc\x11\x42\x0d\x9c\x76\xf1\xbe\xce\xbc\xe8\x10\x95\xb2\x32\x8b\x0f\xc9\x82\x87\xbb\xd2\x30\xa2\xc8\xec\xc6\xfa\x2e\x4b\x5d\x5b\x46\x4f\x1c\xa3\x17\xd5\x7e\x79\xd1\xdc\x28\xde\x14\x4b\xf0\xfb\x1e\x91\xa6\x49\xb4\x3c\x28\x12\x1e\xee\x8a\xa4\x1e\xce\x88\x8e\x93\xae\xef\x32\x27\xe0\x68\x9a\x07\xe4\xfd\x00\x2e\xf2\xc8\x03\xf2\x7d\xa8\x99\xd0\x68\x88\xff\xe3\xf5\xf8\xa7\xfb\xeb\xd1\xdf\x3e\x5d\x5c\x8f\x5a\xf2\xab\xe4\x53\xe2\xab\x78\xac\xed\xe0\x5b\x57\x4d\xa1\xb2\xca\x39\xa6\xa8\x1e\x07\x35\x11\xa7\xdf\xae\x0a\x88\xf1\x40\xc9\x83\xe2\xaf\x94\x42\xde\x87\x95\x92\x49\xbb\x4f\x2b\x0f\x1b\xa5\xd2\x4c\xc8\xbd\x95\xed\xd7\x69\xb7\x94\xa2\x8d\xcc\xa1\xf8\xec\xec\x22\xa5\x29\x94\xfe\xf9\x09\xf4\x04\xf1\xd1\x54\xf6\x9c\x85\x42\x23\x9e\x40\xd3\x5a\x62\xa6\x08\x2d\x2a\x79\x09\xcb\x44\xbd\xf1\x78\xea\x27\x10\xcd\xc8\x7c\x37\xaa\xce\xcf\xae\x44\x3a\xbd\x2f\x55\x28\x8b\xc9\x1e\x77\x24\xbc\x15\x70\xf7\x33\x5e\xf9\x07\x53\x5e\x2a\x09\xe2\xf2\x2f\x8a\x8b\x82\x35\x24\x65\x42\x3e\xac\x9f\x19\xf1\x22\x2e\xdd\xc5\xd7\x7e\x9a\xed\xca\xfc\xe9\xea\x7a\x74\x33\xbe\xfc\xf9\xec\x87\xcb\xd1\xae\xd4\x5f\x4a\x09\xe1\x89\x47\x7b\x1b\xc5\x43\x29\x3a\x45\xae\x43\x99\x16\x54\x04\xcd\x50\xc6\x58\x4e\x17\x30\x8b\xa8\x7e\xcb\xf5\xc9\xe3\x9d\xf2\xee\x02\xd2\xea\x4b\xf2\x00\xab\x85\x19\xb2\xe5\x7f\xa3\x3f\x72\xff\x56\x0b\x88\x64\xda\x6b\x81\xaa\x0a\x4f\xe5\x70\x9e\x25\x1b\x35\x62\xb2\x56\xa1\x15\x37\x07\xb8\x6f\x7d\x5e\x61\x2b\x26\xcb\x15\xdc\xdf\xa1\x8b\x41\x10\x15\xdd\xe9\x06\x02\x7b\x74\x75\x3e\x2a\x8a\xad\xe8\xb0\x9a\xb0\x00\x8c\xf1\x76\xed\xdd\xa2\xf5\xf8\x02\x35\x9d\x7a\xb2\x6b\xe0\xc8\x02\xa2\x31\xda\xe9\x1b\x62\xa2\x28\x9f\x24\x60\xf8\xb3\xdc\xb7\xe5\xf0\x07\x73\x9c\xd1\x9a\x6f\xd8\xc4\x85\x29\xd3\xc8\xd5\x3b\x88\x88\x2d\x5e\xff\x73\x48\x50\x8c\xd5\xdc\x92\xaa\xf1\x1c\x5b\x7b\x87\xc9\x67\x00\xe9\xea\x19\xe4\x56\x75\x3b\xdd\x2a\x8c\xb1\x68\x29\x26\xdc\xa8\xd3\x77\xb5\xef\x61\xfd\xca\x20\x86\x54\x7b\x72\x57\x8e\x84\x2e\x16\x0a\x66\xb0\xf6\x0d\xc6\x85\xb2\x04\x41\xbf\x4a\x71\xba\x56\x83\x30\x71\xf2\x5c\xc7\x51\x7b\x0b\x29\x39\x6c\xde\x98\x8a\x2b\xc3\xc4\xb9\xb3\x0b\x9d\x61\x4e\x82\xf9\x95\xca\xec\xda\x0f\xaf\xfe\xec\x82\x68\x0a\x56\xe4\xe6\xb7\x13\xdf\x21\x8d\x17\x21\x31\x1c\xef\xa4\x83\xc0\xc4\x98\xcc\x0b\x7d\x3c\xdd\xa5\x13\x7e\x07\x9e\xc5\x0f\x01\xaf\x4a\x41\x1b\xa3\x01\x83\x35\xb0\x06\x20\x86\x19\x99\x64\x5c\x4a\x86\xe0\x28\x1c\x26\xe9\x6f\x29\xdc\x37\x33\xc6\x1a\x5f\x67\xec\x96\x36\x74\x64\x08\x56\x56\x34\x72\x8a\x62\xb4\x2c\x5e\x9d\xdb\x68\xf5\x3c\xa7\x8f\x5f\xf2\xba\xa8\xf3\x2e\x4e\x49\xfd\x3a\xe9\xaf\xba\xbf\x86\x38\x30\xfe\x87\x00\xf0\x4d\xfc\x91\xf6\xf6\x4d\xfc\x91\x26\xf0\xc5\x5f\x95\xa4\x82\xbe\x89\x3f\x58\x00\x5b\x8a\x18\xdb\x85\x29\x85\xac\xe5\x37\x0c\x85\xe5\xa5\x4e\x8e\xb8\xa5\x56\xd5\x67\x3b\x69\x1c\x79\xed\x6f\x08\x09\x2b\xa3\xba\xb1\xee\x5a\xa3\x76\x79\x3c\x90\x8a\x48\xd5\xdf\x23\x21\x18\xa6\x41\xb8\x6d\xb8\x2a\xc9\xc0\x88\x87\xa2\x1b\xbf\x64\x74\xb3\xaf\x06\x59\xa5\x54\x11\x67\x5f\x34\xfe\x1e\x49\x5a\x45\x95\x19\xd0\x56\xf6\xbd\x72\x1f\x88\xcc\x66\x5c\xe6\xb9\x35\xb3\xc5\x9f\x8f\x4d\x3f\x15\xbf\xef\x1a\xab\x7d\x02\x30\x51\xd2\xa0\xd7\xa9\xa7\x0e\xbb\x18\x21\x8b\xa2\x9d\x53\x55\x69\x6d\xcf\x12\x7f\x8c\xb5\x0f\xbc\xb8\xa8\x0b\x01\x9d\x1a\x5b\x56\xef\x0b\x86\x4c\x00\xf5\x24\x6f\x3b\x72\x89\x9d\xd3\x76\xe5\xb7\xb8\xc4\xd8\x9e\x5c\x94\xdd\xd2\xe6\x72\x23\x4b\x38\xb7\xa7\xc5\x1d\xa4\x7c\xa1\x02\x7e\xcc\xa0\x4e\xae\x37\xde\x87\x0c\x8b\x99\x1f\xd2\x28\x14\x8d\x4f\xbe\x18\x05\xa0\x40\xf5\x55\x76\x1e\x9b\x57\x2b\xa4\x9f\xeb\xe5\xa3\xd2\xcb\x4b\xf5\x6d\x6f\x73\x68\x74\xb5\x37\xa3\x72\xc6\xe6\xeb\x38\x4a\x32\xbc\xf8\xab\x2f\x65\xa6\xd6\x3b\x35\x2d\x4e\x4b\x5e\x15\x40\xb1\xd5\x86\x01\xe9\x76\x80\xa2\xa4\x84\x6a\x29\x58\x81\x36\x0f\x4a\xf8\x36\x98\xb2\xd4\x7f\x02\x00\x00\xff\xff\xde\xe1\xc1\xaf\x27\x22\x00\x00")

func realtimeJsBytes() ([]byte, error) {
	return bindataRead(
		_realtimeJs,
		"realtime.js",
	)
}

func realtimeJs() (*asset, error) {
	bytes, err := realtimeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "realtime.js", size: 8743, mode: os.FileMode(420), modTime: time.Unix(1433089854, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"realtime.js": realtimeJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"realtime.js": &bintree{realtimeJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

