// Code generated by go-bindata.
// sources:
// realtime.js
// DO NOT EDIT!

package realtime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _realtimeJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x8c\x89\xb4\x90\x12\x47\x72\xfa\xe2\xbd\xd4\x4d\x77\x17\xdd\x1c\x5a\x74\xdb\xa2\xe9\x62\x0f\x69\xb7\x90\xa5\x89\xac\x5a\x26\x05\x92\xfe\x10\x5a\xff\xf7\x9d\xa1\xa8\x2f\xc7\xc5\x5e\x36\x40\x2c\x91\x9c\x67\x3e\x1f\xce\x28\xbe\x80\xbc\x54\x8b\xa4\x84\x5d\x21\x33\xb5\x9b\xfe\x85\x8b\x3b\x95\xae\xd0\xc2\x45\x7c\x16\xc7\xf0\x11\x93\xd2\x16\x6b\x84\x2b\xd8\xce\xa2\xeb\x68\x46\x2f\x4b\x6b\x2b\xf3\x3c\x8e\xf3\xc2\x2e\x37\x8b\x28\x55\xeb\xf8\x5b\x55\x94\xa5\xd2\x49\x9c\xab\x2b\xed\x21\x0c\x7f\x93\x30\xf6\x43\x73\x08\x2f\x32\xdc\xfe\xda\x8a\x32\xee\x25\x69\xfb\xe3\xf5\x27\x78\xa5\xaa\x5a\x17\xf9\xd2\xc2\xb3\xd9\xf5\xff\xcf\x82\x87\x8d\x4c\x6d\xa1\x64\xd0\x78\x15\xc2\xf7\xb3\x33\x80\x6d\xa2\xa1\xd2\xca\x2a\xb8\x01\xb1\xbd\x16\x73\xde\x8c\x63\x53\x61\x5a\x50\x04\x6b\xd4\x39\xfb\x59\xe4\x52\x69\x84\x73\x12\xad\x50\xdb\x02\x8d\x13\x83\x3d\xbc\xb8\x82\xda\xeb\x69\x84\x6f\xa0\xb3\xb4\x9f\x42\xcd\x76\x80\xfe\x8a\x07\x08\x26\x7b\xf8\xf1\x03\x6c\x5d\xa1\x7a\x20\xe8\xe4\x86\x6c\xaa\xc5\x37\x4c\xad\xa0\x03\x27\x06\x30\xa9\x07\x42\xf5\x48\x28\xf4\x22\x1a\xed\x46\x4b\xa8\xe7\x6e\xcd\xa6\x57\xf3\xce\xc8\x1e\x0a\x69\x6c\x22\x53\xc6\xff\xa6\x75\x52\xc3\xd3\xa7\xa4\xe8\x78\xb7\x55\xb6\x5b\x16\x25\x12\x2c\x2a\x51\xe6\x76\x09\x2f\xa1\xf6\xaf\xad\x04\xc0\x3e\xaa\x54\x15\x84\x8d\x11\x2c\x0d\xfa\x93\x07\xa5\x21\x58\x91\x6a\xd8\xf7\xc2\xec\xc4\xea\x7e\xf6\xa5\x71\xfd\x5c\xb0\xf9\x49\x23\x55\x87\xbd\x18\x40\x86\x25\x5a\x84\xfd\xfd\xea\x4b\xa3\xb9\x57\xd7\x79\xc7\x87\x94\x52\x97\xda\x80\x17\x94\x52\xfa\xf5\xae\xf8\x44\xec\x79\x75\x98\xb7\xf5\xc4\x2d\x4a\x6b\x08\x75\x2f\xd6\x68\x4c\x92\xa3\x98\x0a\xd4\x5a\x69\x7a\x52\xfd\x24\x3d\xd2\x52\x19\x14\x5f\x7c\xb9\x5b\x7a\x41\x5a\x26\xc6\x50\xbd\x35\x56\x1a\x8d\x53\x93\x80\x29\x64\x4e\x29\xda\xe1\xc2\x38\x1a\x13\xa4\x2d\x71\xc7\xe5\x60\xa3\xcb\xbe\xd4\xc1\x84\x97\x3e\x04\x7a\x25\x5f\x1a\xd6\x45\xa5\x4a\x13\x06\x46\x4b\x8d\x0f\xf3\x4e\x3c\xfe\x9b\x2f\x40\x60\x7e\x79\xfe\x39\xfe\x1c\x47\x97\xe1\x79\x1c\x59\x34\xd6\xa9\x6d\x15\xd9\xa5\x56\x3b\x10\xaf\xe5\x36\x29\x8b\x0c\xfe\xfc\xf8\x56\x34\x1a\xec\xb2\x30\x51\x63\x46\xec\x8c\x80\x4b\x72\x2b\xbf\xdd\x57\xd1\xf9\xf5\x40\x20\x55\x52\x12\x8b\xda\x32\xba\x3d\x22\x16\x27\xea\xfb\xc1\x65\x90\xfe\xdb\x78\x22\x77\x29\x98\x85\x7c\xec\x00\xa6\x96\xe9\xf3\x9e\xdc\x2b\xac\xa7\x40\xf8\x36\xea\x81\xc6\x7b\x3a\xe3\xaa\xd1\x7b\x63\xeb\x30\x75\x0f\xef\xc1\x40\x49\x0f\xa6\x2c\x38\xfc\xce\xf4\x14\x71\x1b\x59\x61\x8e\x3c\x6f\x52\xd6\x1c\x62\xd9\x33\xb9\x05\xf0\x1e\x59\xbf\x9e\xcd\xe6\x43\xcf\x76\x1c\xa9\xc4\x1d\x74\xfd\x28\x68\x13\x37\x05\xa1\xed\x95\xb8\x74\x41\x77\x56\x98\x4b\x5f\x59\x84\x70\xfc\x68\xf7\x1b\x7e\x45\xc4\xd6\xdb\x24\x5d\xf6\x8d\x05\xfb\x68\x48\x88\x8b\xa1\xa4\xb8\xc4\x79\xb7\xf7\xd5\xfb\x71\x8f\x9c\x1d\xb7\xa2\xd7\x68\x41\xd4\x08\xdc\xaa\x33\x7d\x08\x47\xae\x57\xc4\xc0\xc8\x12\xc6\xa0\x7d\x2d\x2d\x6a\x62\x40\xd0\x9f\x38\x05\x0e\x3f\x85\xff\xcd\xe0\x82\x43\x9f\x85\xa3\xd4\xf7\x59\xfc\x59\xf6\x27\x8f\xd2\xdf\xdc\xae\xff\x24\x1b\x5d\xe4\x4d\x4a\x38\x7c\xb9\x29\xcb\xc7\xe1\xf6\x34\x88\xe8\x52\x66\xf5\x9d\x4d\xa8\x45\x70\x27\xe9\xaa\x16\xbd\x7a\xfb\xfe\xee\xf6\xf7\xa3\xaa\x13\xc0\xdd\xe9\x20\x3c\x51\xf4\x81\xa9\xb4\xc4\x44\x9f\xc8\xa1\x1d\xe7\x8b\xf7\x4e\x66\xca\x21\xa8\x33\x64\x81\x60\x19\x31\x86\xf1\xc1\x00\x96\x25\x36\x39\x45\xf1\x61\x6c\x37\xa3\xd8\xde\x7f\xb8\x7d\x77\x5c\x81\x2e\x40\x67\xd6\xe9\x1c\x19\x55\xd2\xb7\xb9\x81\x65\x57\x95\xde\x34\x17\xcf\x58\x4d\xb9\x70\x07\x11\x2b\xe9\x53\x0e\x81\x3b\xe3\x76\xdd\xc4\x74\xa2\xf4\x6b\x93\x13\xfa\xcd\xdd\xfb\x77\x51\x95\x68\xca\x33\x41\x42\xd7\x3e\x5b\xfe\x90\x84\xd3\xfb\xc8\x7d\x22\x9e\x51\x25\x46\xbb\x44\xcb\x40\xac\x0b\xc3\x0d\xd5\x29\x64\x71\xd1\x6b\x21\x0e\x05\x6e\x9a\x21\x8f\x2b\xe8\x14\x0e\x88\xc4\xc7\x99\xb1\x9e\x83\x7d\xb7\x99\x8f\x24\x8c\x4e\x79\x68\x78\xfc\x91\x00\xfb\xca\x02\x34\x65\x27\xa4\x6a\x38\x91\xc8\x53\x5b\xc8\xcd\xe0\xca\x36\x83\x87\xc4\xa6\xac\x34\x1c\x69\xf1\x33\x9a\x0e\xa3\xf3\xa4\xaa\xca\xba\x49\x61\x5b\x03\x31\x9a\x75\x9d\x50\x4f\xd0\xc3\xb8\x88\x3c\x99\x7e\x4e\xb9\x13\x5d\xad\xcd\x6b\xa9\xf2\x40\xf8\xdb\x8d\x99\x38\x26\x87\xbb\x16\xff\xa6\xf8\xe2\x06\x9e\x9d\xd4\xdb\x37\x0e\xcc\xa6\x54\x51\xbf\xe0\x0a\x52\x89\x9e\x98\xb5\x11\xd3\x81\xa2\x2e\x38\xea\x54\x9f\x68\x8e\xa8\x8d\xef\xb2\x1e\x37\xea\x55\x8f\x60\x9d\xcf\x6e\x5a\x0f\xe9\xac\x75\xef\x76\xeb\x9f\x13\x0a\x44\x37\x97\xc1\xa3\x9e\xb0\x4b\x8c\xf0\x4a\xbb\x8f\x83\x38\xae\x36\x8b\xb2\x48\x0b\xf7\x01\xe3\x27\x72\x37\xfb\x07\x1f\x6e\x83\x61\xee\x39\xcc\x73\x63\x34\xeb\xfd\x27\xc7\xc1\x7f\x4e\x4e\x61\x23\x33\x7c\x28\x24\x66\x61\x38\xff\x27\x00\x00\xff\xff\x2e\x79\xfe\x1c\x03\x0b\x00\x00")

func realtimeJsBytes() ([]byte, error) {
	return bindataRead(
		_realtimeJs,
		"realtime.js",
	)
}

func realtimeJs() (*asset, error) {
	bytes, err := realtimeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "realtime.js", size: 2819, mode: os.FileMode(420), modTime: time.Unix(1433072009, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"realtime.js": realtimeJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"realtime.js": &bintree{realtimeJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

