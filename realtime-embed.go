// Code generated by go-bindata.
// sources:
// realtime.js
// DO NOT EDIT!

package realtime

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _realtimeJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x39\x6b\x73\xe2\x46\xb6\xdf\xfd\x2b\x1a\xd5\xc4\x25\x0d\x8d\x80\xc9\xcd\x7d\xa0\xc8\x73\x1d\x0f\xd9\xf5\x94\x63\x66\xfd\xc8\xee\x16\xf1\xe2\x96\xd4\x80\x8c\x90\x64\x49\xd8\xb0\x58\xf9\xed\x7b\x4e\x77\xeb\x05\xd8\x33\x5b\x9b\x54\x65\x50\x77\x9f\xf7\xbb\xdb\xdd\xf7\x64\x16\x44\x0e\x0b\xc8\xb3\x1f\x7a\xd1\x33\xfd\x2b\x77\xae\x23\x77\xc1\x33\xf2\xbe\x7b\xd4\xed\x92\x2b\xce\x82\xcc\x5f\x72\xd2\x21\x4f\x3d\xb3\x6f\xf6\xe0\x63\x9e\x65\x71\x3a\xe8\x76\x67\x7e\x36\x5f\x39\xa6\x1b\x2d\xbb\x0f\xb1\x1f\x04\x51\xc2\xba\xb3\xa8\x93\x28\x14\x44\xff\xcc\x10\xf7\x8b\x3c\x24\x3f\x7a\xfc\xe9\xff\x0b\x50\xc4\x3b\x01\x6a\xbf\x9c\xdf\x90\xb3\x28\xde\x24\xfe\x6c\x9e\x91\x0f\xbd\xfe\x0f\x47\xfa\x74\x15\xba\x99\x1f\x85\xba\x94\xca\x20\xdb\x23\x42\xba\xdd\x82\x32\x89\x93\x28\x8b\xdc\x28\x20\x4f\x3c\x49\x01\x0e\x4e\x9f\x58\x22\xb7\x89\x4d\xb4\xa7\xbe\x66\x09\x8c\x34\xe6\xae\x0f\xda\x2d\x79\x32\x43\x1d\xfc\x59\x18\x25\x9c\xbc\x03\xc8\x98\x27\x99\xcf\x53\x01\x46\xd6\xe4\xc7\x0e\xd9\x28\x32\x12\xd8\x26\xa5\x14\x6b\x4a\x36\x52\x06\x42\xfc\x29\xd1\x5b\x6b\xf2\xf2\x42\xb2\x4d\xcc\xa3\x29\xa0\xb6\x6c\x60\x19\x39\x0f\xdc\xcd\x34\x38\x10\x60\x84\xb4\x36\x35\xa0\x4d\x03\xc8\x50\x20\x09\xcf\x56\x49\x48\x36\x96\x58\x23\xeb\x85\x55\x32\x59\x13\x3f\x4c\x33\x16\xba\x88\x7f\x9a\x24\x6c\x43\x8e\x8f\x81\xd0\xee\x6e\x41\xec\x79\xee\x07\x1c\xd0\xcc\x80\x87\xb3\x6c\x4e\x4e\xc8\x46\x7d\x16\x10\x84\xac\xcd\x38\x8a\x75\x43\x32\xe1\x41\xca\xd5\xc9\x34\x4a\x88\xbe\x00\xd2\x64\x5d\x01\xa3\x10\x8b\x71\xef\x4e\x8a\xfe\x4e\x43\xf6\x2d\x09\xb5\x31\x2a\x30\x42\x3c\x1e\xf0\x8c\x93\xf5\x78\x71\x27\x29\x57\xe4\x4a\xe9\xf0\x10\x4c\x2a\x4c\xab\xe3\x02\x4c\x0a\xff\x2a\x51\x94\x21\xd6\xb8\xca\xad\x23\xe5\x07\xfe\xc4\xc3\x2c\x05\xac\xb1\xb6\xe4\x69\xca\x66\x5c\xa3\x1a\x4f\x92\x28\x81\x5f\xf0\x5f\x08\x3f\x6e\x10\xa5\x5c\x13\x7c\x11\x25\x88\x5c\x80\x97\x51\x63\xc2\x82\xa1\xff\xac\x66\xf0\xb8\x01\x4b\x53\x88\x85\x84\xc7\x09\x4f\x05\x0b\x46\x52\x3f\x9c\x81\xf9\x9e\xb9\x93\x8a\xf0\x07\x94\xc2\xfd\x65\x0e\xe8\xab\x24\xa8\xc2\x40\x6f\xe1\x52\xa9\x07\x9f\x18\x77\x25\x13\xcd\x2a\xa1\xba\xff\x10\xf9\xf2\x71\xd0\x35\x33\x9e\x66\x82\x48\x13\x0d\xe4\x34\xcb\x88\x6e\x03\x95\xae\x06\x3f\xb8\x3b\x8f\xd2\x0c\x3e\x01\x6c\x97\x9e\x0e\x04\x7f\xeb\xfe\xd6\x35\xdb\xc6\xbb\x03\x84\xb3\x79\x12\x3d\x13\xed\x3c\x7c\x62\x81\xef\x91\xdb\xab\x8b\x01\xd1\xea\x94\xb2\xb9\x9f\x9a\x4a\xea\xe7\x14\x8f\xae\xf8\x6c\xb8\x8e\xcd\x77\xfd\x1a\x80\x1b\x85\x21\x04\x6c\x11\x31\x62\x0f\x62\x18\x7d\xb2\xcd\x6b\x7b\xe9\xca\xa9\xf6\x72\xf8\xbf\x30\x99\xd4\x0b\x93\x00\x8f\x05\x42\xba\x09\xdd\x41\x95\x5b\x0b\xbe\xa1\x04\x68\x16\x86\x15\x4a\xb2\x64\xb6\x5a\xa2\x67\x8a\x60\xb6\x21\x04\xfb\x15\x08\x41\x0c\xa0\x08\xc8\x56\xb9\x05\x0b\xd4\xc6\xe3\x53\xb6\x0a\x32\xad\x38\xc8\x4b\x93\x28\xe1\xc7\x00\x88\xb1\x08\xdf\x56\xfd\x0c\x95\x28\xce\x7a\x7b\x27\x6e\xe2\x3b\xbc\x30\x44\x4e\xc5\x8f\x32\x4f\x4d\x9b\x86\x16\x02\xf7\x39\xad\x52\x45\x6c\x78\x7e\xba\x63\x56\xe9\x57\x79\xc8\x83\x2a\xa3\x0b\x04\xdc\x03\x99\xfa\xbd\xa6\x54\xcf\x68\xf2\x90\x3f\x93\xb2\x66\xeb\x85\x57\x29\xd1\x92\xac\xa3\xb5\x85\xf5\x4b\x2e\x98\x20\x13\x04\x01\x3c\xfc\x29\xf6\x65\x9e\x99\x90\xb5\x43\xe6\xce\xab\xe2\xcb\xeb\x06\x47\x07\x6a\x51\xa8\xb5\x79\x65\xf1\x89\x92\x63\xcc\xd1\x66\x62\x05\x9f\xa6\x03\xe9\xa7\x8b\x55\xc9\x3a\x37\x1a\xa2\xc7\x90\x6d\x66\x06\x38\x29\xcf\xce\xc3\x8c\x27\x10\xa6\x7a\x75\x22\x08\x08\x7c\x4a\xbe\xef\x91\xf7\xa8\x7a\xaf\x69\xfa\xca\x8a\xaf\x59\xbf\xb5\x67\x7e\x59\x65\xfe\x10\x6b\x94\x9a\x4b\x93\xa0\xfa\xe1\x2a\x08\xf6\xd5\xad\xc2\xc0\x84\xda\xe0\x6d\xae\x33\x06\xa5\x12\x2b\x6a\xe9\x35\xf3\xec\x62\x74\x3d\xfc\xb4\xe3\x75\x40\x10\xb5\x4d\x37\x0e\x38\xbd\xc6\xca\x0d\x38\x4b\x0e\xd8\x30\x6b\xda\x0b\xea\x9c\x57\xb3\x94\xc7\x32\x76\x28\x56\xeb\x42\xda\x0d\x21\x47\x5f\x86\x97\xbb\xa6\x2c\x25\x45\xea\x92\x66\x83\x29\x0a\x72\xd0\x3d\x32\xab\x10\x49\x43\x18\x6d\x47\xd6\x22\xdd\xbe\x82\xfb\xf9\x7a\x74\x69\xa6\x59\x02\x14\xfc\xe9\x46\x2f\x53\xd5\x68\x92\x8b\x42\xd5\x3d\x6a\xe4\x84\x93\x2b\x9a\x18\x0b\x40\x08\x4c\x2b\x0e\x4c\x54\xa5\xf2\x20\xd1\xc5\x19\x76\x41\x29\xed\x4e\x24\xd5\x88\xac\x62\x40\xe5\x65\x2c\x65\xc9\xa6\x16\x34\xea\x10\xb8\x08\xc9\x63\x96\x80\x7b\x81\x74\x95\x25\x04\x1a\x16\xc4\x1c\xf4\xb8\x7a\xb0\x29\x63\x43\xbc\xa7\x51\xc0\xcd\x67\x96\x84\x08\x42\x49\x03\xf7\xa8\xea\xe5\xba\x18\x25\x38\xce\x0a\x05\xd3\x3a\x3d\x21\x28\x48\xa1\x8e\x44\xcd\xb3\x1a\xa7\x5e\x9a\xa9\xac\xa8\x2a\x66\x13\x22\x4d\xb0\xd1\xae\xcc\x4f\x35\x4b\xc9\xb4\xc3\x13\x18\x7c\x5a\x40\xa3\x3e\x24\x80\xf4\x99\x1f\xae\xb8\x75\x54\x87\x06\x02\x3c\x80\xb0\xa9\x01\x3e\xa4\x51\x18\xa3\x19\x4c\x16\xc7\xc1\x46\x07\x3a\x14\xd9\x19\x15\x9b\xda\xe4\x82\xff\xc9\xa1\xa2\x06\x57\xe7\xa0\x06\x30\x38\x35\xdf\x09\x82\xd2\x91\x45\x24\x68\x8d\x41\xa6\x04\xd2\x0d\xeb\x35\x22\x51\x28\xed\xf6\x35\x3a\x05\x9c\x5e\x17\x68\xaf\xd1\xac\xcc\x5f\xe5\x08\xdb\x6c\x57\x65\xe8\xe2\x98\xf3\x7a\x1a\x1c\x68\x0d\x45\x94\x04\xd1\x4c\xd7\x54\x89\xe4\x9e\x66\x7c\x53\x43\x8b\x42\x51\x73\xbe\xc6\xf0\xbd\x4d\x3e\x1c\xe4\x57\x55\x65\xee\x51\x88\x5b\xb5\x80\xa4\xc1\x50\xfc\x2e\x5d\xa6\x1a\xad\x11\x2a\x85\x82\x36\x70\x03\xd3\x42\xb4\x52\x2d\x4c\xe1\x35\x1a\xc1\x1e\x5a\x29\xb3\x18\x09\xeb\xc9\x5d\x4f\x9f\x42\x3e\x01\xa4\x6b\xe5\x80\x47\x14\xd6\x77\x28\x12\x62\x28\xa2\x72\x02\xc5\x81\x31\x5e\x39\x81\xef\xfa\x22\xd4\xd4\x44\x59\xce\x90\xb5\xcb\x41\x6d\x28\x54\x89\x8a\x3d\xb9\x31\x33\xaa\xb1\x36\x57\xd7\x19\x4a\x56\x21\x4c\x29\x7e\xc8\x3d\x2c\x55\x47\xdd\xf7\xad\xa3\xf7\x87\x6e\x55\x50\x87\x13\x37\x5a\x61\x71\xef\x7c\x66\xee\xa2\x8b\x75\xa3\xf3\x05\x93\x03\x10\x30\x51\x3a\x22\x53\x3a\xde\x2a\x0e\xf8\xda\x84\xc1\x4c\x5d\x88\x06\xa4\x67\xfe\x60\x7e\x00\x28\xdd\x35\xf0\x52\xf5\x3d\xf9\x1c\x41\x3b\xf3\x97\x50\xd2\x53\xa0\x07\x27\x78\xf1\x02\x05\x79\x08\x1a\xc2\x65\x4f\xf4\xc3\x09\x5f\x67\x50\x5a\x53\x5b\x58\xbb\x5c\xbe\xbc\x94\xea\x32\xea\x18\xdb\x72\x34\x76\x75\x63\x5b\x78\x0c\xaa\xd1\xca\xcd\xa2\xc4\x66\x79\x51\x83\x3c\x74\xbb\x63\x38\xe6\x9c\xa5\xa3\xe7\xf0\x8b\xbc\x75\x41\x4e\x1b\xc7\xc7\x3a\x1b\x7b\x77\xb6\x03\xff\x18\x96\x5b\xcd\x89\xb6\x53\x7d\x53\x56\xdb\x47\xab\xba\x39\x1d\xc1\x3d\xd1\x0f\x59\x30\x44\xf7\xd9\xe2\x5f\x5a\x96\x0c\xab\x55\xc9\x59\x93\xd2\x01\xa9\x5d\x63\x9b\x3e\xfb\x58\x5d\x55\x32\x03\x80\xcb\xe0\xee\x50\xfa\x42\x1b\x88\xb5\x13\x41\xb8\xb0\x50\xad\x64\x7b\x51\x8b\x70\xb5\x74\x78\xa2\x0d\x94\x9f\x19\x54\x00\xd7\x12\x27\xea\x62\x37\x80\x5a\x81\xcd\x19\x0e\x98\x51\x44\x83\x5c\xbb\x16\x9c\xcd\x40\x2c\x63\x8b\x55\x72\x06\x7e\x79\x79\x61\x6a\xbe\x85\x79\xc0\x2d\x2e\x6b\x12\xad\xd5\xb7\x4a\x23\xda\x3d\xca\xed\x02\xd4\xe2\x27\x9e\xe5\xb5\xdb\x06\x52\x71\x84\x11\xa9\x8b\x46\xac\x10\xd5\x47\x2f\x47\xec\xa9\x3d\x07\x56\xd4\xb7\xa7\x05\x01\x40\x9c\x83\x1c\x15\x6b\xff\x20\x4f\xcb\xff\x66\x46\x96\x9a\xb9\x07\xc5\x49\x9e\xd7\x22\x04\x3d\xa1\xc8\x3a\xd4\x05\x65\xbc\x4a\x19\xef\xc4\xb5\x8c\xad\x03\x1b\xee\x9c\x25\x67\x91\xc7\x4f\x33\x10\xd7\x12\x36\xd2\x9d\x13\xfb\xbf\xfe\xf7\xf8\xf8\x87\xff\x39\xb1\x9d\x1a\x5b\xb7\xdd\xce\xf3\x52\xc9\x92\x93\x87\xb1\x49\xbd\x8a\x1b\xa7\x53\x3a\xb7\x5b\x7d\xba\x04\xa6\x21\x04\x96\x62\x1a\x9e\x2c\x81\x29\x44\xda\x78\x79\x47\x97\xed\x76\xa9\x75\x64\xc3\x85\x85\x65\x73\x33\x8d\x03\x3f\xd3\xb5\xae\x66\xd0\xd8\x66\xf4\xd1\xee\xd3\xc4\x8e\x14\x3e\x4d\xed\xa7\x08\x2e\x55\x3d\xcb\x12\xbe\x9c\xda\xd1\xf8\xf1\x8e\x7a\xc7\xc7\x72\x1b\x9c\x9d\x42\x78\x97\x8b\x78\x3c\xbd\xfb\x98\x02\x7a\x8a\xd9\xa6\xf7\xe8\xa3\x61\x3e\x44\x7e\x28\xe8\x0f\x1e\x6d\x3b\xe9\xf4\x01\x3e\x55\xcc\x0d\x2a\x31\x5b\x82\x8c\x48\x2e\x71\x89\x63\x90\x5a\x3a\xa7\xcb\x4e\x9f\x32\x0a\x33\x0e\x7d\x6c\xb7\x69\xc9\x64\x7a\x7c\xfc\x78\x62\x27\xc6\x76\x6e\x2f\xc6\xdc\x8c\xe2\x3b\xd3\x65\x41\x00\x08\x31\x58\x01\xe6\x32\x07\x6a\xd7\x22\x17\x31\x18\xcb\x18\xd4\x3a\x1a\x22\x1a\x53\x3b\x2e\x63\x0b\x1a\x2b\x1e\x81\x2e\x2d\x57\x9f\x1a\x86\xbc\x47\x62\xea\x05\xba\x06\xd7\x43\x51\xd9\x09\x83\xb1\x22\x4c\xfd\x19\x24\x0d\x71\x20\xfc\x3b\xfd\x1e\x24\x7a\xc6\x67\x3c\x81\xe1\x20\x58\x71\x4a\x96\x6c\x81\x55\x3f\x9b\x73\x81\x9d\xf0\x29\x4f\x78\xe8\x02\x82\x00\x10\x07\x4c\x3c\x6a\xf0\x80\xe3\x55\x0f\x4a\x2c\xdc\xf3\x70\xfb\x9f\x3c\x89\x3a\x48\x16\xab\x87\xc7\xd7\x70\xcb\x87\xe1\xf3\xea\xf4\xe6\x7c\x74\x39\xf9\x72\x7a\xf3\xe7\xc9\xf9\xc5\xc5\xf0\x4f\xa7\x17\x93\xd3\xab\xab\xd3\xbf\x4f\xce\x2f\x3f\x0d\xff\xa6\x09\xc3\x48\x0b\x52\x6e\x58\xa0\x14\x8e\x57\x30\x18\xeb\x53\xda\xef\x19\xa8\xb9\x34\x90\x54\x4f\x63\x9e\x87\xea\xa3\xa9\x8e\x8f\xa7\x27\x85\x09\x9a\x1a\xdf\x80\x38\xe2\x09\x69\xea\x17\xd2\x90\x5f\x6e\xaf\x6f\xc8\xe5\xe8\x86\x38\x9c\xcc\xc0\xa8\x50\x4c\x41\x6c\x16\x4a\x5d\x45\x85\x20\x50\x5e\x94\x5a\x29\x56\xc0\x52\xd9\x86\x2a\xbf\x9e\x5e\xdc\x0e\x27\xa3\xdb\x9b\xc9\xe8\xe7\xc9\x4f\xa3\xdb\xcb\x4f\xd7\xbb\x5a\xcc\xed\x87\x37\x9c\x99\xa3\xbb\x70\x3c\x01\xe7\x77\xfa\x2d\xc8\x70\x21\xe1\x08\x5c\xfb\xbb\x86\x15\x76\x0a\x5b\x09\x8f\x03\x06\x61\xd7\xfd\xbd\xdf\x9d\x51\x0c\xb9\xda\x56\x0f\xb7\x00\x16\x82\x49\x05\x8f\xff\x06\xbf\x58\x84\x72\x91\x7a\x64\x5e\xa5\x1e\xd7\x21\xb3\xa9\x07\x22\x8b\xc0\x52\xd5\xb0\x65\xab\x52\xeb\xbc\xbc\xa8\x2a\x08\x5f\x33\xdd\xd9\x89\xab\x11\x34\x05\xf1\x50\x43\xe0\x32\x16\x46\x19\xc6\x97\x22\x51\xb7\x17\xd8\x7c\x72\x7a\x39\x19\xfd\xf4\x79\x78\x76\xa3\x01\x3f\x4c\x76\xac\x66\x2d\x7f\xec\xa0\xd0\xaf\x51\xbd\x8f\xe2\x7b\xa2\x5e\xfc\x36\x05\x0f\x18\x1b\xd0\x4d\x51\x01\x95\x12\xd5\x06\xd0\x61\x57\x3f\x9f\x75\xfe\xfb\xff\x7a\x1f\x1a\xfc\x47\x5f\x20\xd4\xc0\x69\xe7\x9f\xea\xcc\x8b\x0e\x51\x29\x2b\xb3\xf8\x35\x59\xf0\x70\x5f\x1a\x46\x14\x99\xfd\x58\xdf\x67\xa9\x6b\xcb\xe8\x89\x63\xf4\xa2\xda\x2f\x2f\x30\xe6\xc5\x9b\x62\x09\x7e\x3f\x20\xd2\x34\x89\x96\xaf\x8a\x84\x87\xfb\x22\xa9\xc7\x31\xa2\xe3\x40\xec\xbb\xcc\x09\x38\x9a\xe6\x1e\x79\xdf\x83\x8b\x3c\x72\x8f\x7c\xef\x6b\x26\x34\x1a\xe2\xff\x7c\x35\xfa\x65\x72\x35\xfc\xcb\xed\xf9\xd5\x70\x47\x7e\x95\x7c\x4a\x7c\x15\x8f\xb5\x1d\x7c\xcf\xaa\x29\x54\x56\x39\xc7\x14\xd5\xe3\x55\x4d\xc4\xe9\xb7\xab\x02\x62\xdc\x53\x72\xaf\xf8\x2b\xa5\x90\xf7\xeb\x4a\xc9\xa4\x3d\xa4\x95\x87\x8d\x52\x69\x26\xe4\xde\xca\xf6\xeb\xec\xb6\x94\xa2\x8d\xcc\xa1\xf8\xec\xed\x22\xa5\x29\x94\xfe\x79\x1b\x7a\x82\xf8\x68\x2a\x7b\xc6\x42\xa1\x11\x4f\xa0\x69\x2d\x31\x53\x84\x16\x95\xbc\x84\x65\xa2\xde\x78\x3c\xf5\x13\x88\x66\x64\xbe\x1f\x55\x67\xa7\x97\x22\x9d\x3e\x95\x2a\x94\xc5\xe4\x80\x3b\x12\xbe\x13\x70\x93\x19\xaf\xfc\x83\x29\x2f\x95\x04\x71\xf9\x9b\xe2\xa2\x60\x0d\x49\x99\x90\x0f\xeb\x67\x46\xbc\x88\x4b\x77\xf1\xb5\x9f\x66\xfb\x32\xdf\x5e\x5e\x0d\xaf\x47\x17\xbf\x9e\xfe\x74\x31\xdc\x97\xfa\xad\x94\x10\x9e\x78\xb0\xb7\x51\x3c\x90\xa2\x53\xe4\x3a\x90\x69\x41\x45\xd0\x0c\x64\x8c\xe5\x74\x01\xb3\x88\xea\xb7\x5c\x1f\x3f\xdc\x29\xef\x2e\x20\xad\xde\x92\x07\x58\x2d\xcc\x90\x2d\xff\x1d\xfd\x91\xfb\xb7\x5a\x40\x24\xd3\x41\x0b\x54\x55\x78\x2a\x87\xf3\x2c\xd9\xa8\x11\x93\xed\x14\x5a\x71\x73\x80\xcb\xd6\xe3\x0a\x5b\x31\x59\xae\xe0\x9a\x0f\x5d\x0c\x82\xa8\xe8\x4e\xd7\x10\xd8\xc3\xcb\xb3\x61\x51\x6c\x45\x87\xd5\x84\x05\x60\x8c\xb7\x6b\xef\x16\x3b\x8f\x2f\x50\xd3\xa9\x27\xbb\x06\x8e\x2c\x20\x1a\xa3\xad\x9e\x21\x26\x8a\xf2\x49\x02\x86\x3f\xcb\xfd\xb1\x1c\xfe\x60\x8e\x33\x76\xe6\x1b\x36\x76\x61\xca\x34\x72\xf5\x0e\x22\x62\x8b\xd7\xff\xe4\x11\x14\x63\x35\xb7\xa4\x6a\x3c\xc7\xd6\xde\x62\xf2\xb5\x40\xba\x7a\x06\xb9\x55\xdd\x60\xb7\x0a\x63\x24\x5a\x8a\x09\x17\xef\xf4\x63\xed\x7b\x50\xbf\x32\x88\x21\xd5\x1e\xdf\x95\x23\xa1\x8b\x85\x82\x19\x6c\xf7\x06\xe3\x42\x59\x82\xa0\x5f\xa5\x38\x5d\xab\x41\x98\x38\x79\xae\xe3\xa8\xbd\x85\x94\x1c\x34\x6f\x4c\xc5\x95\x61\xec\xdc\xd9\x85\xce\x30\x27\xc1\xfc\x4a\x65\x76\x1d\x86\x57\x7f\x5a\x41\x34\x05\x2b\x72\xf3\xdb\x89\xef\x91\xc6\x8b\x90\x18\x8e\xf7\xd2\x41\x60\x62\x4c\xe6\x85\x3e\x9e\xee\xd2\x31\xbf\x03\xcf\xe2\x87\x80\x57\xa5\x60\x17\xa3\x01\x83\x35\xb0\x06\x20\x86\x19\x99\x64\x5c\x4a\x86\xe0\x28\x1c\x26\xe9\x1f\x29\xdc\x37\x33\xc6\x1a\x5f\x67\xec\x96\x36\x74\x64\x08\x56\x56\x34\x72\x8a\x62\xec\x58\xbc\x3a\xb7\xd1\xea\x79\x4e\x1f\xde\xf2\xba\xa8\xf3\x2e\x4e\x49\xbd\x3a\xe9\xaf\xba\xbf\x86\xd8\x37\xfe\x83\x00\xf0\x4d\xfc\x91\xf6\xf6\x4d\xfc\x91\x26\xf0\xc5\x5f\x8e\xa4\x82\xbe\x89\x3f\x58\x00\x77\x14\x31\xb6\x0b\x53\x0a\x59\xcb\x6f\x18\x0a\xcb\x4b\x9d\x1c\x71\x4b\xad\xaa\xcf\xdd\xa4\x71\xe4\xb5\xbf\x21\x24\xac\x8c\xea\xc6\xba\x6f\x8d\xda\xe5\xf1\x95\x54\x44\xaa\xfe\x01\x09\xc1\x30\x0d\xc2\xbb\x86\xab\x92\x0c\x8c\xf8\x5a\x74\xe3\x97\x8c\x6e\xf6\xd5\x20\xab\x94\x2a\xe2\xec\x4d\xe3\x1f\x90\x64\xa7\xa8\x32\x03\xda\xca\xa1\x57\xee\x57\x22\xb3\x19\x97\x79\x6e\xcd\x6c\xf1\x27\x62\xd3\x4f\xc5\xef\xc7\xc6\xea\x90\x00\x4c\x94\x34\xe8\x75\xea\xa9\xc3\x2e\x46\xc8\xa2\x68\xe7\x54\x55\x5a\xdb\xb3\xc4\x1f\x5c\xed\x57\x5e\x5c\xd4\x85\x80\x4e\x8d\x2d\xab\xf7\x05\x43\x26\x80\x7a\x92\xb7\x1d\xb9\xc4\xce\x69\xbb\xf2\x5b\x5c\x62\x6c\x4f\x2e\xca\x6e\x69\x73\xb9\x91\x25\x9c\xdb\xd3\xe2\x0e\x52\xbe\x50\x01\x3f\x66\x50\x27\xd7\x1b\xef\x43\x86\xc5\xcc\xcf\x69\x14\x8a\xc6\x27\x5f\x8c\x02\x50\xa0\xfa\x2a\x3b\x8f\xcd\xab\x15\xd2\xcf\xf5\xf2\x51\xe9\xe5\xa5\xfa\xb6\xb7\x39\x34\xba\xda\x9b\x51\x39\x63\xf3\x75\x1c\x25\x19\x5e\xfc\xd5\x97\x32\xd3\xce\x73\x36\x2d\x4e\x4b\x5e\x15\x40\xb1\xb5\x0b\x03\xd2\xed\x01\x45\x49\x09\xb5\xa3\x60\x05\xda\x3c\x28\xe1\x77\xc1\x94\xa5\xfe\x15\x00\x00\xff\xff\x40\x8c\x26\x66\x0b\x22\x00\x00")

func realtimeJsBytes() ([]byte, error) {
	return bindataRead(
		_realtimeJs,
		"realtime.js",
	)
}

func realtimeJs() (*asset, error) {
	bytes, err := realtimeJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "realtime.js", size: 8715, mode: os.FileMode(420), modTime: time.Unix(1433087585, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"realtime.js": realtimeJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"realtime.js": &bintree{realtimeJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

